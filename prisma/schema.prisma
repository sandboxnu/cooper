// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for NextAuth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @unique @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    profile Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// End of NextAuth specific schemas

model Profile {
    id              String   @id @default(cuid())
    firstName       String
    lastName        String
    major           String
    minor           String?
    graduationYear  Int
    graduationMonth Int
    createdAt       DateTime @default(now())

    reviews Review[]

    user   User   @relation(fields: [id], references: [id])
    userId String @unique
}

model Company {
    id          String   @id @default(cuid())
    name        String
    description String?
    industry    Industry
    location    String
    createdAt   DateTime @default(now())
    roles       Role[]
}

model Role {
    id          String @id @default(cuid())
    title       String
    description String

    reviews Review[]

    Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String?
}

model Review {
    id                  String          @id @default(cuid())
    workTerm            WorkTerm
    workYear            Int
    startDate           DateTime?
    endDate             DateTime?
    hourlyPay           Decimal
    interviewDifficulty Int?
    interviewExperience Int?
    supervisorRating    Int?
    cultureRating       Int?
    overallRating       Int
    textReview          String
    workEnvironment     WorkEnvironment
    freeLunch           Boolean
    drugTest            Boolean
    federalHolidays     Boolean
    overtimeNormal      Boolean
    createdAt           DateTime        @default(now())

    Role   Role?   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String?

    Profile   Profile? @relation(fields: [profileId], references: [id])
    profileId String?
}

enum Industry {
    TECHNOLOGY
    HEALTHCARE
    FINANCE
    EDUCATION
    MANUFACTURING
    HOSPITALITY
    RETAIL
    TRANSPORTATION
    ENERGY
    MEDIA
    AEROSPACE
    TELECOMMUNICATIONS
    BIOTECHNOLOGY
    PHARMACEUTICAL
    CONSTRUCTION
    REALESTATE
    FASHIONANDBEAUTY
    ENTERTAINMENT
    GOVERNMENT
    NONPROFIT
    FOODANDBEVERAGE
    GAMING
    SPORTS
    MARKETING
    CONSULTING
    FITNESS
    ECOMMERCE
    ENVIRONMENTAL
    ROBOTICS
    MUSIC
    INSURANCE
    DESIGN
    PUBLISHING
    ARCHITECTURE
    VETERINARY
}

enum WorkEnvironment {
    IN_PERSON
    HYBRID
    REMOTE
}

enum WorkTerm {
    FALL
    SPRING
    SUMMER
}