"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+server@10.45.0";
exports.ids = ["vendor-chunks/@trpc+server@10.45.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLE9BQU9DLEdBQUc7SUFDbkIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzdCLElBQUksTUFBTUMsT0FBT0osSUFBSTtRQUNqQixNQUFNSyxJQUFJTCxHQUFHLENBQUNJLElBQUk7UUFDbEJILE1BQU0sQ0FBQ0ksRUFBRSxHQUFHRDtJQUNoQjtJQUNBLE9BQU9IO0FBQ1g7QUFFQSxtREFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FBRyxNQUFNSywwQkFBMEI7SUFDaEM7OztHQUdELEdBQUdDLGFBQWEsQ0FBQztJQUNoQjs7R0FFRCxHQUFHQyxhQUFhLENBQUM7SUFDaEIsMEJBQTBCO0lBQzFCQyx1QkFBdUIsQ0FBQztJQUN4QkMsaUJBQWlCLENBQUM7SUFDbEIsaUNBQWlDO0lBQ2pDQyxjQUFjLENBQUM7SUFDZkMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxzQkFBc0IsQ0FBQztJQUN2QkMsU0FBUyxDQUFDO0lBQ1ZDLFVBQVUsQ0FBQztJQUNYQyxxQkFBcUIsQ0FBQztJQUN0QkMsbUJBQW1CLENBQUM7SUFDcEJDLHVCQUF1QixDQUFDO0lBQ3hCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxNQUFNQyw2QkFBNkJ2QixPQUFPTztBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzMxNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getCauseFromUnknown)\n/* harmony export */ });\n/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== \"object\") {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2dldENhdXNlRnJvbVVua25vd24tMmQ2NjQxNGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLFNBQVNDLEtBQUs7SUFDdkIsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVSxPQUFPQSxVQUFVO0FBQ2hFO0FBRUEsTUFBTUcsMEJBQTBCQztBQUNoQztBQUNBLFNBQVNDLG9CQUFvQkMsS0FBSztJQUM5QixJQUFJQSxpQkFBaUJGLE9BQU87UUFDeEIsT0FBT0U7SUFDWDtJQUNBLE1BQU1DLE9BQU8sT0FBT0Q7SUFDcEIsSUFBSUMsU0FBUyxlQUFlQSxTQUFTLGNBQWNELFVBQVUsTUFBTTtRQUMvRCxPQUFPRTtJQUNYO0lBQ0EsK0NBQStDO0lBQy9DLElBQUlELFNBQVMsVUFBVTtRQUNuQixPQUFPLElBQUlILE1BQU1LLE9BQU9IO0lBQzVCO0lBQ0Esb0RBQW9EO0lBQ3BELElBQUlQLFNBQVNPLFFBQVE7UUFDakIsTUFBTUksTUFBTSxJQUFJUDtRQUNoQixJQUFJLE1BQU1RLE9BQU9MLE1BQU07WUFDbkJJLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHTCxLQUFLLENBQUNLLElBQUk7UUFDekI7UUFDQSxPQUFPRDtJQUNYO0lBQ0EsT0FBT0Y7QUFDWDtBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvZ2V0Q2F1c2VGcm9tVW5rbm93bi0yZDY2NDE0YS5tanM/NmUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgLy8gY2hlY2sgdGhhdCB2YWx1ZSBpcyBvYmplY3RcbiAgICByZXR1cm4gISF2YWx1ZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuY2xhc3MgVW5rbm93bkNhdXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5mdW5jdGlvbiBnZXRDYXVzZUZyb21Vbmtub3duKGNhdXNlKSB7XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGNhdXNlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGNhdXNlO1xuICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnZnVuY3Rpb24nIHx8IGNhdXNlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIFByaW1pdGl2ZSB0eXBlcyBqdXN0IGdldCB3cmFwcGVkIGluIGFuIGVycm9yXG4gICAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoU3RyaW5nKGNhdXNlKSk7XG4gICAgfVxuICAgIC8vIElmIGl0J3MgYW4gb2JqZWN0LCB3ZSdsbCBjcmVhdGUgYSBzeW50aGV0aWMgZXJyb3JcbiAgICBpZiAoaXNPYmplY3QoY2F1c2UpKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBVbmtub3duQ2F1c2VFcnJvcigpO1xuICAgICAgICBmb3IoY29uc3Qga2V5IGluIGNhdXNlKXtcbiAgICAgICAgICAgIGVycltrZXldID0gY2F1c2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgeyBnZXRDYXVzZUZyb21Vbmtub3duIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJpc09iamVjdCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiVW5rbm93bkNhdXNlRXJyb3IiLCJFcnJvciIsImdldENhdXNlRnJvbVVua25vd24iLCJjYXVzZSIsInR5cGUiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJlcnIiLCJrZXkiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUY7QUFFakYsTUFBTUksNkJBQTZCSCxzREFBTUEsQ0FBQ0Usa0RBQXVCQTtBQUNqRSxNQUFNRSx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxzQkFBc0I7SUFDdEJDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7SUFDOUIsT0FBT2pCLHFCQUFxQixDQUFDaUIsS0FBSyxJQUFJO0FBQzFDO0FBQ0EsU0FBU0Msa0JBQWtCQyxJQUFJO0lBQzNCLE1BQU1DLE1BQU1DLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBTztRQUNyQ0E7S0FDSDtJQUNELE1BQU1JLGVBQWUsSUFBSUMsSUFBSUosSUFBSUssR0FBRyxDQUFDLENBQUNDO1FBQ2xDLElBQUksV0FBV0EsS0FBSztZQUNoQixNQUFNQyxPQUFPRCxJQUFJRSxLQUFLLENBQUNELElBQUk7WUFDM0IsSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtnQkFDckMsT0FBT0YsS0FBS0UsVUFBVTtZQUMxQjtZQUNBLE1BQU1aLE9BQU9sQiwwQkFBMEIsQ0FBQzJCLElBQUlFLEtBQUssQ0FBQ1gsSUFBSSxDQUFDO1lBQ3ZELE9BQU9ELHFCQUFxQkM7UUFDaEM7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJTSxhQUFhTyxJQUFJLEtBQUssR0FBRztRQUN6QixPQUFPO0lBQ1g7SUFDQSxNQUFNRCxhQUFhTixhQUFhUSxNQUFNLEdBQUdDLElBQUksR0FBR0MsS0FBSztJQUNyRCxPQUFPSjtBQUNYO0FBQ0EsU0FBU0ssMkJBQTJCTixLQUFLO0lBQ3JDLE9BQU9aLHFCQUFxQlksTUFBTVgsSUFBSTtBQUMxQztBQUVBLE1BQU1rQixPQUFPO0FBQ2IsT0FBTztBQUNQO0FBQ0EsU0FBU0MsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsTUFBTUMsUUFBUSxJQUFJQyxNQUFNTCxNQUFNO1FBQzFCTSxLQUFLQyxJQUFJLEVBQUVDLEdBQUc7WUFDVixJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRO2dCQUMzQyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT0M7WUFDWDtZQUNBLE9BQU9SLGlCQUFpQkMsVUFBVTttQkFDM0JDO2dCQUNISzthQUNIO1FBQ0w7UUFDQUUsT0FBT0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUk7WUFDZixNQUFNQyxVQUFVWCxJQUFJLENBQUNBLEtBQUtZLE1BQU0sR0FBRyxFQUFFLEtBQUs7WUFDMUMsT0FBT2IsU0FBUztnQkFDWlcsTUFBTUMsVUFBVUQsS0FBS0UsTUFBTSxJQUFJLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHQTtnQkFDbERWLE1BQU1XLFVBQVVYLEtBQUthLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS2I7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7O0NBSUMsR0FBRyxNQUFNYSx1QkFBdUIsQ0FBQ2YsV0FBV0QsaUJBQWlCQyxVQUFVLEVBQUU7QUFDMUU7Ozs7Q0FJQyxHQUFHLE1BQU1nQixrQkFBa0IsQ0FBQ2hCO0lBQ3pCLE9BQU8sSUFBSUcsTUFBTUwsTUFBTTtRQUNuQk0sS0FBS0MsSUFBSSxFQUFFWSxJQUFJO1lBQ1gsSUFBSSxPQUFPQSxTQUFTLFlBQVlBLFNBQVMsUUFBUTtnQkFDN0Msd0RBQXdEO2dCQUN4RCx3REFBd0Q7Z0JBQ3hELE9BQU9WO1lBQ1g7WUFDQSxPQUFPUCxTQUFTaUI7UUFDcEI7SUFDSjtBQUNKO0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/MWNiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObservable),\n/* harmony export */   o: () => (/* binding */ observable)\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\nfunction isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtYWRlMWJhZDgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsU0FBU0MsQ0FBQztJQUNmLE9BQU9BO0FBQ1g7QUFFQSxjQUFjLEdBQUcsU0FBU0MsY0FBY0MsR0FBRztJQUN2QyxJQUFJQSxJQUFJQyxNQUFNLEtBQUssR0FBRztRQUNsQixPQUFPSjtJQUNYO0lBQ0EsSUFBSUcsSUFBSUMsTUFBTSxLQUFLLEdBQUc7UUFDbEIsb0VBQW9FO1FBQ3BFLE9BQU9ELEdBQUcsQ0FBQyxFQUFFO0lBQ2pCO0lBQ0EsT0FBTyxTQUFTRSxNQUFNQyxLQUFLO1FBQ3ZCLE9BQU9ILElBQUlJLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQyxLQUFLQSxHQUFHRCxPQUFPRjtJQUM1QztBQUNKO0FBRUEsU0FBU0ksYUFBYVQsQ0FBQztJQUNuQixPQUFPLE9BQU9BLE1BQU0sWUFBWUEsTUFBTSxRQUFRLGVBQWVBO0FBQ2pFO0FBQ0EsU0FBU1UsV0FBV0MsU0FBUztJQUN6QixNQUFNQyxPQUFPO1FBQ1RELFdBQVdFLFFBQVE7WUFDZixJQUFJQyxjQUFjO1lBQ2xCLElBQUlDLFNBQVM7WUFDYixJQUFJQyxlQUFlO1lBQ25CLElBQUlDLHNCQUFzQjtZQUMxQixTQUFTQztnQkFDTCxJQUFJSixnQkFBZ0IsTUFBTTtvQkFDdEJHLHNCQUFzQjtvQkFDdEI7Z0JBQ0o7Z0JBQ0EsSUFBSUQsY0FBYztvQkFDZDtnQkFDSjtnQkFDQUEsZUFBZTtnQkFDZixJQUFJLE9BQU9GLGdCQUFnQixZQUFZO29CQUNuQ0E7Z0JBQ0osT0FBTyxJQUFJQSxhQUFhO29CQUNwQkEsWUFBWUksV0FBVztnQkFDM0I7WUFDSjtZQUNBSixjQUFjSCxVQUFVO2dCQUNwQlEsTUFBTUMsS0FBSztvQkFDUCxJQUFJTCxRQUFRO3dCQUNSO29CQUNKO29CQUNBRixTQUFTTSxJQUFJLEdBQUdDO2dCQUNwQjtnQkFDQUMsT0FBT0MsR0FBRztvQkFDTixJQUFJUCxRQUFRO3dCQUNSO29CQUNKO29CQUNBQSxTQUFTO29CQUNURixTQUFTUSxLQUFLLEdBQUdDO29CQUNqQko7Z0JBQ0o7Z0JBQ0FLO29CQUNJLElBQUlSLFFBQVE7d0JBQ1I7b0JBQ0o7b0JBQ0FBLFNBQVM7b0JBQ1RGLFNBQVNVLFFBQVE7b0JBQ2pCTDtnQkFDSjtZQUNKO1lBQ0EsSUFBSUQscUJBQXFCO2dCQUNyQkM7WUFDSjtZQUNBLE9BQU87Z0JBQ0hBO1lBQ0o7UUFDSjtRQUNBTSxNQUFNLEdBQUdDLFVBQVU7WUFDZixPQUFPeEIsY0FBY3dCLFlBQVliO1FBQ3JDO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBRThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLWFkZTFiYWQ4Lm1qcz80MzY0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKChwcmV2LCBmbik9PmZuKHByZXYpLCBpbnB1dCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGwgJiYgJ3N1YnNjcmliZScgaW4geDtcbn1cbmZ1bmN0aW9uIG9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHtcbiAgICAgICAgc3Vic2NyaWJlIChvYnNlcnZlcikge1xuICAgICAgICAgICAgbGV0IHRlYXJkb3duUmVmID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpc0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB1bnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0ZWFyZG93bkltbWVkaWF0ZWx5ID0gZmFsc2U7XG4gICAgICAgICAgICBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd25SZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25JbW1lZGlhdGVseSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZWFyZG93blJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93blJlZigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVhcmRvd25SZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25SZWYudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZWFyZG93blJlZiA9IHN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQ/Lih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvciAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcj8uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGVhcmRvd25JbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwaXBlICguLi5vcGVyYXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKShzZWxmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbmV4cG9ydCB7IGlzT2JzZXJ2YWJsZSBhcyBpLCBvYnNlcnZhYmxlIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJpZGVudGl0eSIsIngiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwibGVuZ3RoIiwicGlwZWQiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsImlzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJzZWxmIiwib2JzZXJ2ZXIiLCJ0ZWFyZG93blJlZiIsImlzRG9uZSIsInVuc3Vic2NyaWJlZCIsInRlYXJkb3duSW1tZWRpYXRlbHkiLCJ1bnN1YnNjcmliZSIsIm5leHQiLCJ2YWx1ZSIsImVycm9yIiwiZXJyIiwiY29tcGxldGUiLCJwaXBlIiwib3BlcmF0aW9ucyIsImkiLCJvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   observable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable-ade1bad8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs\");\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ObservableAbortError\";\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError(\"This operation was aborted.\"));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFlatProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createRecursiveProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   getCauseFromUnknown: () => (/* reexport safe */ _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_2__.g),\n/* harmony export */   getErrorShape: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   transformTRPCResponse: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-f91d720c.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformTRPCResponse-1153b421.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../getCauseFromUnknown-2d66414a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../codes-c924c3db.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdGO0FBQ2U7QUFDeEI7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29wZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanM/NzEwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjIGFzIGNyZWF0ZUZsYXRQcm94eSwgYSBhcyBjcmVhdGVSZWN1cnNpdmVQcm94eSB9IGZyb20gJy4uL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldEVycm9yU2hhcGUsIHQgYXMgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldENhdXNlRnJvbVVua25vd24gfSBmcm9tICcuLi9nZXRDYXVzZUZyb21Vbmtub3duLTJkNjY0MTRhLm1qcyc7XG5pbXBvcnQgJy4uL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG4iXSwibmFtZXMiOlsiYyIsImNyZWF0ZUZsYXRQcm94eSIsImEiLCJjcmVhdGVSZWN1cnNpdmVQcm94eSIsImciLCJnZXRFcnJvclNoYXBlIiwidCIsInRyYW5zZm9ybVRSUENSZXNwb25zZSIsImdldENhdXNlRnJvbVVua25vd24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RTtBQUNIO0FBRXBFOztDQUVDLEdBQUcsU0FBU0ksY0FBY0MsSUFBSTtJQUMzQixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxNQUFNLEVBQUcsR0FBR0g7SUFDbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUcsR0FBR0osS0FBS0UsS0FBSztJQUM1QixNQUFNRyxRQUFRO1FBQ1ZDLFNBQVNKLE1BQU1JLE9BQU87UUFDdEJGLE1BQU1OLGtEQUF1QixDQUFDTSxLQUFLO1FBQ25DRyxNQUFNO1lBQ0ZIO1lBQ0FJLFlBQVlaLHNEQUEwQkEsQ0FBQ007UUFDM0M7SUFDSjtJQUNBLElBQUlDLE9BQU9NLEtBQUssSUFBSSxPQUFPVCxLQUFLRSxLQUFLLENBQUNRLEtBQUssS0FBSyxVQUFVO1FBQ3RETCxNQUFNRSxJQUFJLENBQUNHLEtBQUssR0FBR1YsS0FBS0UsS0FBSyxDQUFDUSxLQUFLO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPVCxTQUFTLFVBQVU7UUFDMUJJLE1BQU1FLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtJQUN0QjtJQUNBLE9BQU9FLE9BQU9RLGNBQWMsQ0FBQztRQUN6QixHQUFHWCxJQUFJO1FBQ1BLO0lBQ0o7QUFDSjtBQUVBLFNBQVNPLDBCQUEwQlQsTUFBTSxFQUFFVSxJQUFJO0lBQzNDLElBQUksV0FBV0EsTUFBTTtRQUNqQixPQUFPO1lBQ0gsR0FBR0EsSUFBSTtZQUNQWCxPQUFPQyxPQUFPVyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLWCxLQUFLO1FBQ3pEO0lBQ0o7SUFDQSxJQUFJLFVBQVVXLEtBQUtJLE1BQU0sRUFBRTtRQUN2QixPQUFPO1lBQ0gsR0FBR0osSUFBSTtZQUNQSSxRQUFRO2dCQUNKLEdBQUdKLEtBQUtJLE1BQU07Z0JBQ2RWLE1BQU1KLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtJLE1BQU0sQ0FBQ1YsSUFBSTtZQUM5RDtRQUNKO0lBQ0o7SUFDQSxPQUFPTTtBQUNYO0FBQ0E7O0VBRUUsR0FBRyxTQUFTSyxzQkFBc0JmLE1BQU0sRUFBRWdCLFdBQVc7SUFDbkQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxZQUFZRyxHQUFHLENBQUMsQ0FBQ1QsT0FBT0QsMEJBQTBCVCxRQUFRVSxTQUFTRCwwQkFBMEJULFFBQVFnQjtBQUM3STtBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz8zMjI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/TRPCError-7e8e2a1b.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/TRPCError-7e8e2a1b.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCError),\n/* harmony export */   g: () => (/* binding */ getTRPCErrorFromUnknown)\n/* harmony export */ });\n/* harmony import */ var _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCauseFromUnknown-2d66414a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\");\n\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) {\n        return cause;\n    }\n    if (cause instanceof Error && cause.name === \"TRPCError\") {\n        // https://github.com/trpc/trpc/pull/4848\n        return cause;\n    }\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    // Inherit stack from error\n    if (cause instanceof Error && cause.stack) {\n        trpcError.stack = cause.stack;\n    }\n    return trpcError;\n}\nclass TRPCError extends Error {\n    constructor(opts){\n        const cause = (0,_getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n        if (!this.cause) {\n            // idk why this is needed, but it is\n            this.cause = cause;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L1RSUENFcnJvci03ZThlMmExYi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThFO0FBRTlFLFNBQVNFLHdCQUF3QkMsS0FBSztJQUNsQyxJQUFJQSxpQkFBaUJDLFdBQVc7UUFDNUIsT0FBT0Q7SUFDWDtJQUNBLElBQUlBLGlCQUFpQkUsU0FBU0YsTUFBTUcsSUFBSSxLQUFLLGFBQWE7UUFDdEQseUNBQXlDO1FBQ3pDLE9BQU9IO0lBQ1g7SUFDQSxNQUFNSSxZQUFZLElBQUlILFVBQVU7UUFDNUJJLE1BQU07UUFDTkw7SUFDSjtJQUNBLDJCQUEyQjtJQUMzQixJQUFJQSxpQkFBaUJFLFNBQVNGLE1BQU1NLEtBQUssRUFBRTtRQUN2Q0YsVUFBVUUsS0FBSyxHQUFHTixNQUFNTSxLQUFLO0lBQ2pDO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLE1BQU1ILGtCQUFrQkM7SUFDcEJLLFlBQVlDLElBQUksQ0FBQztRQUNiLE1BQU1SLFFBQVFGLG9FQUFtQkEsQ0FBQ1UsS0FBS1IsS0FBSztRQUM1QyxNQUFNUyxVQUFVRCxLQUFLQyxPQUFPLElBQUlULE9BQU9TLFdBQVdELEtBQUtILElBQUk7UUFDM0QsNkRBQTZEO1FBQzdELDBEQUEwRDtRQUMxRCxLQUFLLENBQUNJLFNBQVM7WUFDWFQ7UUFDSjtRQUNBLElBQUksQ0FBQ0ssSUFBSSxHQUFHRyxLQUFLSCxJQUFJO1FBQ3JCLElBQUksQ0FBQ0YsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0gsS0FBSyxFQUFFO1lBQ2Isb0NBQW9DO1lBQ3BDLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtRQUNqQjtJQUNKO0FBQ0o7QUFFd0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29wZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L1RSUENFcnJvci03ZThlMmExYi5tanM/ZTIzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldENhdXNlRnJvbVVua25vd24gfSBmcm9tICcuL2dldENhdXNlRnJvbVVua25vd24tMmQ2NjQxNGEubWpzJztcblxuZnVuY3Rpb24gZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24oY2F1c2UpIHtcbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBUUlBDRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGNhdXNlO1xuICAgIH1cbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5uYW1lID09PSAnVFJQQ0Vycm9yJykge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL3B1bGwvNDg0OFxuICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgfVxuICAgIGNvbnN0IHRycGNFcnJvciA9IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgY2F1c2VcbiAgICB9KTtcbiAgICAvLyBJbmhlcml0IHN0YWNrIGZyb20gZXJyb3JcbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5zdGFjaykge1xuICAgICAgICB0cnBjRXJyb3Iuc3RhY2sgPSBjYXVzZS5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIHRycGNFcnJvcjtcbn1cbmNsYXNzIFRSUENFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKXtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBnZXRDYXVzZUZyb21Vbmtub3duKG9wdHMuY2F1c2UpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gb3B0cy5tZXNzYWdlID8/IGNhdXNlPy5tZXNzYWdlID8/IG9wdHMuY29kZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvZGUgPSBvcHRzLmNvZGU7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUUlBDRXJyb3InO1xuICAgICAgICBpZiAoIXRoaXMuY2F1c2UpIHtcbiAgICAgICAgICAgIC8vIGlkayB3aHkgdGhpcyBpcyBuZWVkZWQsIGJ1dCBpdCBpc1xuICAgICAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBUUlBDRXJyb3IgYXMgVCwgZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24gYXMgZyB9O1xuIl0sIm5hbWVzIjpbImciLCJnZXRDYXVzZUZyb21Vbmtub3duIiwiZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24iLCJjYXVzZSIsIlRSUENFcnJvciIsIkVycm9yIiwibmFtZSIsInRycGNFcnJvciIsImNvZGUiLCJzdGFjayIsImNvbnN0cnVjdG9yIiwib3B0cyIsIm1lc3NhZ2UiLCJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/TRPCError-7e8e2a1b.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLE9BQU9DLEdBQUc7SUFDbkIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzdCLElBQUksTUFBTUMsT0FBT0osSUFBSTtRQUNqQixNQUFNSyxJQUFJTCxHQUFHLENBQUNJLElBQUk7UUFDbEJILE1BQU0sQ0FBQ0ksRUFBRSxHQUFHRDtJQUNoQjtJQUNBLE9BQU9IO0FBQ1g7QUFFQSxtREFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FBRyxNQUFNSywwQkFBMEI7SUFDaEM7OztHQUdELEdBQUdDLGFBQWEsQ0FBQztJQUNoQjs7R0FFRCxHQUFHQyxhQUFhLENBQUM7SUFDaEIsMEJBQTBCO0lBQzFCQyx1QkFBdUIsQ0FBQztJQUN4QkMsaUJBQWlCLENBQUM7SUFDbEIsaUNBQWlDO0lBQ2pDQyxjQUFjLENBQUM7SUFDZkMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxzQkFBc0IsQ0FBQztJQUN2QkMsU0FBUyxDQUFDO0lBQ1ZDLFVBQVUsQ0FBQztJQUNYQyxxQkFBcUIsQ0FBQztJQUN0QkMsbUJBQW1CLENBQUM7SUFDcEJDLHVCQUF1QixDQUFDO0lBQ3hCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxNQUFNQyw2QkFBNkJ2QixPQUFPTztBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzMxNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/config-e3143f14.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/config-e3143f14.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ defaultTransformer),\n/* harmony export */   b: () => (/* binding */ createCallerFactory),\n/* harmony export */   c: () => (/* binding */ createRouterFactory),\n/* harmony export */   d: () => (/* binding */ defaultFormatter),\n/* harmony export */   e: () => (/* binding */ callProcedure),\n/* harmony export */   g: () => (/* binding */ getDataTransformer),\n/* harmony export */   i: () => (/* binding */ isServerDefault),\n/* harmony export */   p: () => (/* binding */ procedureTypes)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-7e8e2a1b.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/TRPCError-7e8e2a1b.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n/**\n * @public\n */ /**\n * @internal\n */ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n * @internal\n */ const defaultTransformer = {\n    _default: true,\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n/**\n * Create an object without inheriting anything from `Object.prototype`\n * @internal\n */ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst procedureTypes = [\n    \"query\",\n    \"mutation\",\n    \"subscription\"\n];\nfunction isRouter(procedureOrRouter) {\n    return \"router\" in procedureOrRouter._def;\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n * Reserved words that can't be used as router or procedure names\n */ const reservedWords = [\n    /**\n   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n   * since JS will think that `.then` is something that exists\n   */ \"then\"\n];\n/**\n * @internal\n */ function createRouterFactory(config) {\n    return function createRouterInner(procedures) {\n        const reservedWordsUsed = new Set(Object.keys(procedures).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) {\n            throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        }\n        const routerProcedures = omitPrototype({});\n        function recursiveGetPaths(procedures, path = \"\") {\n            for (const [key, procedureOrRouter] of Object.entries(procedures ?? {})){\n                const newPath = `${path}${key}`;\n                if (isRouter(procedureOrRouter)) {\n                    recursiveGetPaths(procedureOrRouter._def.procedures, `${newPath}.`);\n                    continue;\n                }\n                if (routerProcedures[newPath]) {\n                    throw new Error(`Duplicate key: ${newPath}`);\n                }\n                routerProcedures[newPath] = procedureOrRouter;\n            }\n        }\n        recursiveGetPaths(procedures);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures: routerProcedures,\n            ...emptyRouter,\n            record: procedures,\n            queries: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.query).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            mutations: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.mutation).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            subscriptions: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.subscription).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {})\n        };\n        const router = {\n            ...procedures,\n            _def,\n            createCaller (ctx) {\n                return createCallerFactory()(router)(ctx);\n            },\n            getErrorShape (opts) {\n                const { path, error } = opts;\n                const { code } = opts.error;\n                const shape = {\n                    message: error.message,\n                    code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__.T[code],\n                    data: {\n                        code,\n                        httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(error)\n                    }\n                };\n                if (config.isDev && typeof opts.error.stack === \"string\") {\n                    shape.data.stack = opts.error.stack;\n                }\n                if (typeof path === \"string\") {\n                    shape.data.path = path;\n                }\n                return this._def._config.errorFormatter({\n                    ...opts,\n                    shape\n                });\n            }\n        };\n        return router;\n    };\n}\n/**\n * @internal\n */ function callProcedure(opts) {\n    const { type, path } = opts;\n    if (!(path in opts.procedures) || !opts.procedures[path]?._def[type]) {\n        throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"NOT_FOUND\",\n            message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n    }\n    const procedure = opts.procedures[path];\n    return procedure(opts);\n}\nfunction createCallerFactory() {\n    return function createCallerInner(router) {\n        const def = router._def;\n        return function createCaller(ctx) {\n            const proxy = (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(({ path, args })=>{\n                // interop mode\n                if (path.length === 1 && procedureTypes.includes(path[0])) {\n                    return callProcedure({\n                        procedures: def.procedures,\n                        path: args[0],\n                        rawInput: args[1],\n                        ctx,\n                        type: path[0]\n                    });\n                }\n                const fullPath = path.join(\".\");\n                const procedure = def.procedures[fullPath];\n                let type = \"query\";\n                if (procedure._def.mutation) {\n                    type = \"mutation\";\n                } else if (procedure._def.subscription) {\n                    type = \"subscription\";\n                }\n                return procedure({\n                    path: fullPath,\n                    rawInput: args[0],\n                    ctx,\n                    type\n                });\n            });\n            return proxy;\n        };\n    };\n}\n/**\n * The default check to see if we're in a server\n */ const isServerDefault =  true || 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/config-e3143f14.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getCauseFromUnknown)\n/* harmony export */ });\n/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== \"object\") {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2dldENhdXNlRnJvbVVua25vd24tMmQ2NjQxNGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLFNBQVNDLEtBQUs7SUFDdkIsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVSxPQUFPQSxVQUFVO0FBQ2hFO0FBRUEsTUFBTUcsMEJBQTBCQztBQUNoQztBQUNBLFNBQVNDLG9CQUFvQkMsS0FBSztJQUM5QixJQUFJQSxpQkFBaUJGLE9BQU87UUFDeEIsT0FBT0U7SUFDWDtJQUNBLE1BQU1DLE9BQU8sT0FBT0Q7SUFDcEIsSUFBSUMsU0FBUyxlQUFlQSxTQUFTLGNBQWNELFVBQVUsTUFBTTtRQUMvRCxPQUFPRTtJQUNYO0lBQ0EsK0NBQStDO0lBQy9DLElBQUlELFNBQVMsVUFBVTtRQUNuQixPQUFPLElBQUlILE1BQU1LLE9BQU9IO0lBQzVCO0lBQ0Esb0RBQW9EO0lBQ3BELElBQUlQLFNBQVNPLFFBQVE7UUFDakIsTUFBTUksTUFBTSxJQUFJUDtRQUNoQixJQUFJLE1BQU1RLE9BQU9MLE1BQU07WUFDbkJJLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHTCxLQUFLLENBQUNLLElBQUk7UUFDekI7UUFDQSxPQUFPRDtJQUNYO0lBQ0EsT0FBT0Y7QUFDWDtBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvZ2V0Q2F1c2VGcm9tVW5rbm93bi0yZDY2NDE0YS5tanM/NmUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgLy8gY2hlY2sgdGhhdCB2YWx1ZSBpcyBvYmplY3RcbiAgICByZXR1cm4gISF2YWx1ZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuY2xhc3MgVW5rbm93bkNhdXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5mdW5jdGlvbiBnZXRDYXVzZUZyb21Vbmtub3duKGNhdXNlKSB7XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGNhdXNlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGNhdXNlO1xuICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnZnVuY3Rpb24nIHx8IGNhdXNlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIFByaW1pdGl2ZSB0eXBlcyBqdXN0IGdldCB3cmFwcGVkIGluIGFuIGVycm9yXG4gICAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoU3RyaW5nKGNhdXNlKSk7XG4gICAgfVxuICAgIC8vIElmIGl0J3MgYW4gb2JqZWN0LCB3ZSdsbCBjcmVhdGUgYSBzeW50aGV0aWMgZXJyb3JcbiAgICBpZiAoaXNPYmplY3QoY2F1c2UpKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBVbmtub3duQ2F1c2VFcnJvcigpO1xuICAgICAgICBmb3IoY29uc3Qga2V5IGluIGNhdXNlKXtcbiAgICAgICAgICAgIGVycltrZXldID0gY2F1c2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgeyBnZXRDYXVzZUZyb21Vbmtub3duIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJpc09iamVjdCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiVW5rbm93bkNhdXNlRXJyb3IiLCJFcnJvciIsImdldENhdXNlRnJvbVVua25vd24iLCJjYXVzZSIsInR5cGUiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJlcnIiLCJrZXkiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUY7QUFFakYsTUFBTUksNkJBQTZCSCxzREFBTUEsQ0FBQ0Usa0RBQXVCQTtBQUNqRSxNQUFNRSx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxzQkFBc0I7SUFDdEJDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7SUFDOUIsT0FBT2pCLHFCQUFxQixDQUFDaUIsS0FBSyxJQUFJO0FBQzFDO0FBQ0EsU0FBU0Msa0JBQWtCQyxJQUFJO0lBQzNCLE1BQU1DLE1BQU1DLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBTztRQUNyQ0E7S0FDSDtJQUNELE1BQU1JLGVBQWUsSUFBSUMsSUFBSUosSUFBSUssR0FBRyxDQUFDLENBQUNDO1FBQ2xDLElBQUksV0FBV0EsS0FBSztZQUNoQixNQUFNQyxPQUFPRCxJQUFJRSxLQUFLLENBQUNELElBQUk7WUFDM0IsSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtnQkFDckMsT0FBT0YsS0FBS0UsVUFBVTtZQUMxQjtZQUNBLE1BQU1aLE9BQU9sQiwwQkFBMEIsQ0FBQzJCLElBQUlFLEtBQUssQ0FBQ1gsSUFBSSxDQUFDO1lBQ3ZELE9BQU9ELHFCQUFxQkM7UUFDaEM7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJTSxhQUFhTyxJQUFJLEtBQUssR0FBRztRQUN6QixPQUFPO0lBQ1g7SUFDQSxNQUFNRCxhQUFhTixhQUFhUSxNQUFNLEdBQUdDLElBQUksR0FBR0MsS0FBSztJQUNyRCxPQUFPSjtBQUNYO0FBQ0EsU0FBU0ssMkJBQTJCTixLQUFLO0lBQ3JDLE9BQU9aLHFCQUFxQlksTUFBTVgsSUFBSTtBQUMxQztBQUVBLE1BQU1rQixPQUFPO0FBQ2IsT0FBTztBQUNQO0FBQ0EsU0FBU0MsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsTUFBTUMsUUFBUSxJQUFJQyxNQUFNTCxNQUFNO1FBQzFCTSxLQUFLQyxJQUFJLEVBQUVDLEdBQUc7WUFDVixJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRO2dCQUMzQyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT0M7WUFDWDtZQUNBLE9BQU9SLGlCQUFpQkMsVUFBVTttQkFDM0JDO2dCQUNISzthQUNIO1FBQ0w7UUFDQUUsT0FBT0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUk7WUFDZixNQUFNQyxVQUFVWCxJQUFJLENBQUNBLEtBQUtZLE1BQU0sR0FBRyxFQUFFLEtBQUs7WUFDMUMsT0FBT2IsU0FBUztnQkFDWlcsTUFBTUMsVUFBVUQsS0FBS0UsTUFBTSxJQUFJLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHQTtnQkFDbERWLE1BQU1XLFVBQVVYLEtBQUthLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS2I7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7O0NBSUMsR0FBRyxNQUFNYSx1QkFBdUIsQ0FBQ2YsV0FBV0QsaUJBQWlCQyxVQUFVLEVBQUU7QUFDMUU7Ozs7Q0FJQyxHQUFHLE1BQU1nQixrQkFBa0IsQ0FBQ2hCO0lBQ3pCLE9BQU8sSUFBSUcsTUFBTUwsTUFBTTtRQUNuQk0sS0FBS0MsSUFBSSxFQUFFWSxJQUFJO1lBQ1gsSUFBSSxPQUFPQSxTQUFTLFlBQVlBLFNBQVMsUUFBUTtnQkFDN0Msd0RBQXdEO2dCQUN4RCx3REFBd0Q7Z0JBQ3hELE9BQU9WO1lBQ1g7WUFDQSxPQUFPUCxTQUFTaUI7UUFDcEI7SUFDSjtBQUNKO0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/MWNiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* reexport safe */ _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   callProcedure: () => (/* reexport safe */ _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   createCallerFactory: () => (/* reexport safe */ _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createInputMiddleware: () => (/* binding */ createInputMiddleware),\n/* harmony export */   createOutputMiddleware: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   defaultTransformer: () => (/* reexport safe */ _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   getDataTransformer: () => (/* reexport safe */ _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* reexport safe */ _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   procedureTypes: () => (/* reexport safe */ _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   router: () => (/* binding */ router)\n/* harmony export */ });\n/* harmony import */ var _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-e3143f14.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/config-e3143f14.mjs\");\n/* harmony import */ var _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-7e8e2a1b.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/TRPCError-7e8e2a1b.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n/* harmony import */ var _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getCauseFromUnknown-2d66414a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\");\n\n\n\n\n\n\n\n/**\n * @deprecated\n */ const middlewareMarker$1 = \"middlewareMarker\";\nfunction getParseFn$1(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ProcedureParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ProcedureParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ProcedureParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @internal\n * @deprecated\n */ class Procedure {\n    _def() {\n        return {\n            middlewares: this.middlewares,\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        };\n    }\n    async parseInput(rawInput) {\n        try {\n            return await this.parseInputFn(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n    }\n    async parseOutput(rawOutput) {\n        try {\n            return await this.parseOutputFn(rawOutput);\n        } catch (cause) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause,\n                message: \"Output validation failed\"\n            });\n        }\n    }\n    /**\n   * Trigger middlewares in order, parse raw input, call resolver & parse raw output\n   * @internal\n   */ async call(opts) {\n        // wrap the actual resolver and treat as the last \"middleware\"\n        const middlewaresWithResolver = this.middlewares.concat([\n            async ({ ctx })=>{\n                const input = await this.parseInput(opts.rawInput);\n                const rawOutput = await this.resolver({\n                    ...opts,\n                    ctx,\n                    input\n                });\n                const data = await this.parseOutput(rawOutput);\n                return {\n                    marker: middlewareMarker$1,\n                    ok: true,\n                    data,\n                    ctx\n                };\n            }\n        ]);\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const result = await middlewaresWithResolver[callOpts.index]({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: opts.rawInput,\n                    meta: this.meta,\n                    next: async (nextOpts)=>{\n                        return await callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts ? nextOpts.ctx : callOpts.ctx\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ctx: callOpts.ctx,\n                    ok: false,\n                    error: (0,_TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker$1\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    }\n    /**\n   * Create new procedure with passed middlewares\n   * @param middlewares\n   */ inheritMiddlewares(middlewares) {\n        const Constructor = this.constructor;\n        const instance = new Constructor({\n            middlewares: [\n                ...middlewares,\n                ...this.middlewares\n            ],\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        });\n        return instance;\n    }\n    constructor(opts){\n        this.middlewares = opts.middlewares;\n        this.resolver = opts.resolver;\n        this.inputParser = opts.inputParser;\n        this.parseInputFn = getParseFn$1(this.inputParser);\n        this.outputParser = opts.outputParser;\n        this.parseOutputFn = getParseFn$1(this.outputParser);\n        this.meta = opts.meta;\n    }\n}\nfunction createProcedure(opts) {\n    const inputParser = \"input\" in opts ? opts.input : (input)=>{\n        if (input != null) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                message: \"No input expected\"\n            });\n        }\n        return undefined;\n    };\n    const outputParser = \"output\" in opts && opts.output ? opts.output : (output)=>output;\n    return new Procedure({\n        inputParser: inputParser,\n        resolver: opts.resolve,\n        middlewares: [],\n        outputParser: outputParser,\n        meta: opts.meta\n    });\n}\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ParserZodEsque\n        // ParserValibotEsque (<= v0.12.X)\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    if (typeof parser.assert === \"function\") {\n        // ParserScaleEsque\n        return (value)=>{\n            parser.assert(value);\n            return value;\n        };\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @deprecated only for backwards compat\n * @internal\n */ function getParseFnOrPassThrough(procedureParser) {\n    if (!procedureParser) {\n        return (v)=>v;\n    }\n    return getParseFn(procedureParser);\n}\n/**\n * Ensures there are no duplicate keys when building a procedure.\n */ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs){\n        for(const key in overrides){\n            if (key in newObj && newObj[key] !== overrides[key]) {\n                throw new Error(`Duplicate key ${key}`);\n            }\n            newObj[key] = overrides[key];\n        }\n    }\n    return newObj;\n}\n/**\n * @internal\n */ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\nconst experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\nfunction isPlainObject(obj) {\n    return obj && typeof obj === \"object\" && !Array.isArray(obj);\n}\n/**\n * @internal\n * Please note, `trpc-openapi` uses this function.\n */ function createInputMiddleware(parse) {\n    const inputMiddleware = async ({ next, rawInput, input })=>{\n        let parsedInput;\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        // Multiple input parsers\n        const combinedInput = isPlainObject(input) && isPlainObject(parsedInput) ? {\n            ...input,\n            ...parsedInput\n        } : parsedInput;\n        // TODO fix this typing?\n        return next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n * @internal\n */ function createOutputMiddleware(parse) {\n    const outputMiddleware = async ({ next })=>{\n        const result = await next();\n        if (!result.ok) {\n            // pass through failures without validating\n            return result;\n        }\n        try {\n            const data = await parse(result.data);\n            return {\n                ...result,\n                data\n            };\n        } catch (cause) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n/**\n * @internal\n */ const middlewareMarker = \"middlewareMarker\";\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta, ...rest } = def2;\n    // TODO: maybe have a fn here to warn about calls\n    return createBuilder({\n        ...mergeWithoutOverrides(def1, rest),\n        inputs: [\n            ...def1.inputs,\n            ...inputs ?? []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? {\n            ...def1.meta,\n            ...meta\n        } : meta ?? def1.meta\n    });\n}\nfunction createBuilder(initDef = {}) {\n    const _def = {\n        inputs: [],\n        middlewares: [],\n        ...initDef\n    };\n    return {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parseOutput = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parseOutput)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta: meta\n            });\n        },\n        /**\n     * @deprecated\n     * This functionality is deprecated and will be removed in the next major version.\n     */ unstable_concat (builder) {\n            return createNewBuilder(_def, builder._def);\n        },\n        use (middlewareBuilderOrFn) {\n            // Distinguish between a middleware builder and a middleware function\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares: middlewares\n            });\n        },\n        query (resolver) {\n            return createResolver({\n                ..._def,\n                query: true\n            }, resolver);\n        },\n        mutation (resolver) {\n            return createResolver({\n                ..._def,\n                mutation: true\n            }, resolver);\n        },\n        subscription (resolver) {\n            return createResolver({\n                ..._def,\n                subscription: true\n            }, resolver);\n        }\n    };\n}\nfunction createResolver(_def, resolver) {\n    const finalBuilder = createNewBuilder(_def, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    return createProcedureCaller(finalBuilder._def);\n}\nconst codeblock = `\nThis is a client-only function.\nIf you want to call this function on the server, see https://trpc.io/docs/server/server-side-calls\n`.trim();\nfunction createProcedureCaller(_def) {\n    const procedure = async function resolve(opts) {\n        // is direct server-side call\n        if (!opts || !(\"rawInput\" in opts)) {\n            throw new Error(codeblock);\n        }\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const middleware = _def.middlewares[callOpts.index];\n                const result = await middleware({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: callOpts.rawInput ?? opts.rawInput,\n                    meta: _def.meta,\n                    input: callOpts.input,\n                    next (_nextOpts) {\n                        const nextOpts = _nextOpts;\n                        return callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts && \"ctx\" in nextOpts ? {\n                                ...callOpts.ctx,\n                                ...nextOpts.ctx\n                            } : callOpts.ctx,\n                            input: nextOpts && \"input\" in nextOpts ? nextOpts.input : callOpts.input,\n                            rawInput: nextOpts && \"rawInput\" in nextOpts ? nextOpts.rawInput : callOpts.rawInput\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ok: false,\n                    error: (0,_TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    };\n    procedure._def = _def;\n    procedure.meta = _def.meta;\n    return procedure;\n}\nfunction migrateProcedure(oldProc, type) {\n    const def = oldProc._def();\n    const inputParser = getParseFnOrPassThrough(def.inputParser);\n    const outputParser = getParseFnOrPassThrough(def.outputParser);\n    const inputMiddleware = createInputMiddleware(inputParser);\n    const builder = createBuilder({\n        inputs: [\n            def.inputParser\n        ],\n        middlewares: [\n            ...def.middlewares,\n            inputMiddleware,\n            createOutputMiddleware(outputParser)\n        ],\n        meta: def.meta,\n        output: def.outputParser,\n        mutation: type === \"mutation\",\n        query: type === \"query\",\n        subscription: type === \"subscription\"\n    });\n    const proc = builder[type]((opts)=>def.resolver(opts));\n    return proc;\n}\nfunction migrateRouter(oldRouter) {\n    const errorFormatter = oldRouter._def.errorFormatter;\n    const transformer = oldRouter._def.transformer;\n    const queries = {};\n    const mutations = {};\n    const subscriptions = {};\n    for (const [name, procedure] of Object.entries(oldRouter._def.queries)){\n        queries[name] = migrateProcedure(procedure, \"query\");\n    }\n    for (const [name1, procedure1] of Object.entries(oldRouter._def.mutations)){\n        mutations[name1] = migrateProcedure(procedure1, \"mutation\");\n    }\n    for (const [name2, procedure2] of Object.entries(oldRouter._def.subscriptions)){\n        subscriptions[name2] = migrateProcedure(procedure2, \"subscription\");\n    }\n    const procedures = mergeWithoutOverrides(queries, mutations, subscriptions);\n    const newRouter = (0,_config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        transformer,\n        errorFormatter,\n        isDev: \"development\" !== \"production\"\n    })(procedures);\n    return newRouter;\n}\nfunction getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\nconst PROCEDURE_DEFINITION_MAP = {\n    query: \"queries\",\n    mutation: \"mutations\",\n    subscription: \"subscriptions\"\n};\nfunction safeObject(...args) {\n    return Object.assign(Object.create(null), ...args);\n}\n/**\n * @internal The type signature of this class may change without warning.\n * @deprecated\n */ class Router {\n    static prefixProcedures(procedures, prefix) {\n        const eps = safeObject();\n        for (const [key, procedure] of Object.entries(procedures)){\n            eps[prefix + key] = procedure;\n        }\n        return eps;\n    }\n    query(path, procedure) {\n        const router = new Router({\n            queries: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    mutation(path, procedure) {\n        const router = new Router({\n            mutations: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    subscription(path, procedure) {\n        const router = new Router({\n            subscriptions: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    merge(prefixOrRouter, maybeRouter) {\n        let prefix = \"\";\n        let childRouter;\n        if (typeof prefixOrRouter === \"string\" && maybeRouter instanceof Router) {\n            prefix = prefixOrRouter;\n            childRouter = maybeRouter;\n        } else if (prefixOrRouter instanceof Router) {\n            childRouter = prefixOrRouter;\n        } else {\n            throw new Error(\"Invalid args\");\n        }\n        const duplicateQueries = Object.keys(childRouter._def.queries).filter((key)=>!!this._def.queries[prefix + key]);\n        const duplicateMutations = Object.keys(childRouter._def.mutations).filter((key)=>!!this._def.mutations[prefix + key]);\n        const duplicateSubscriptions = Object.keys(childRouter._def.subscriptions).filter((key)=>!!this._def.subscriptions[prefix + key]);\n        const duplicates = [\n            ...duplicateQueries,\n            ...duplicateMutations,\n            ...duplicateSubscriptions\n        ];\n        if (duplicates.length) {\n            throw new Error(`Duplicate endpoint(s): ${duplicates.join(\", \")}`);\n        }\n        const mergeProcedures = (defs)=>{\n            const newDefs = safeObject();\n            for (const [key, procedure] of Object.entries(defs)){\n                const newProcedure = procedure.inheritMiddlewares(this._def.middlewares);\n                newDefs[key] = newProcedure;\n            }\n            return Router.prefixProcedures(newDefs, prefix);\n        };\n        return new Router({\n            ...this._def,\n            queries: safeObject(this._def.queries, mergeProcedures(childRouter._def.queries)),\n            mutations: safeObject(this._def.mutations, mergeProcedures(childRouter._def.mutations)),\n            subscriptions: safeObject(this._def.subscriptions, mergeProcedures(childRouter._def.subscriptions))\n        });\n    }\n    /**\n   * Invoke procedure. Only for internal use within library.\n   */ async call(opts) {\n        const { type, path } = opts;\n        const defTarget = PROCEDURE_DEFINITION_MAP[type];\n        const defs = this._def[defTarget];\n        const procedure = defs[path];\n        if (!procedure) {\n            throw new _TRPCError_7e8e2a1b_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"NOT_FOUND\",\n                message: `No \"${type}\"-procedure on path \"${path}\"`\n            });\n        }\n        return procedure.call(opts);\n    }\n    createCaller(ctx) {\n        return {\n            query: (path, ...args)=>{\n                return this.call({\n                    type: \"query\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            mutation: (path, ...args)=>{\n                return this.call({\n                    type: \"mutation\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            subscription: (path, ...args)=>{\n                return this.call({\n                    type: \"subscription\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            }\n        };\n    }\n    /**\n   * Function to be called before any procedure is invoked\n   * @link https://trpc.io/docs/middlewares\n   */ middleware(middleware) {\n        return new Router({\n            ...this._def,\n            middlewares: [\n                ...this._def.middlewares,\n                middleware\n            ]\n        });\n    }\n    /**\n   * Format errors\n   * @link https://trpc.io/docs/error-formatting\n   */ formatError(errorFormatter) {\n        if (this._def.errorFormatter !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            throw new Error(\"You seem to have double `formatError()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            errorFormatter: errorFormatter\n        });\n    }\n    getErrorShape(opts) {\n        const { path, error } = opts;\n        const { code } = opts.error;\n        const shape = {\n            message: error.message,\n            code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__.T[code],\n            data: {\n                code,\n                httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(error)\n            }\n        };\n        if (globalThis.process?.env?.NODE_ENV !== \"production\" && typeof opts.error.stack === \"string\") {\n            shape.data.stack = opts.error.stack;\n        }\n        if (typeof path === \"string\") {\n            shape.data.path = path;\n        }\n        return this._def.errorFormatter({\n            ...opts,\n            shape\n        });\n    }\n    /**\n   * Add data transformer to serialize/deserialize input args + output\n   * @link https://trpc.io/docs/data-transformers\n   */ transformer(_transformer) {\n        const transformer = getDataTransformer(_transformer);\n        if (this._def.transformer !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            throw new Error(\"You seem to have double `transformer()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            transformer\n        });\n    }\n    /**\n   * Flattens the generics of TQueries/TMutations/TSubscriptions.\n   * ⚠️ Experimental - might disappear. ⚠️\n   *\n   * @alpha\n   */ flat() {\n        return this;\n    }\n    /**\n   * Interop mode for v9.x -> v10.x\n   */ interop() {\n        return migrateRouter(this);\n    }\n    constructor(def){\n        this._def = {\n            queries: def?.queries ?? safeObject(),\n            mutations: def?.mutations ?? safeObject(),\n            subscriptions: def?.subscriptions ?? safeObject(),\n            middlewares: def?.middlewares ?? [],\n            errorFormatter: def?.errorFormatter ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d,\n            transformer: def?.transformer ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a\n        };\n    }\n}\n/**\n * @deprecated\n */ function router() {\n    return new Router();\n}\nfunction mergeRouters(...routerList) {\n    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            if (currentErrorFormatter !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n                throw new Error(\"You seem to have several error formatters\");\n            }\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            if (prev !== _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a && prev !== current._def._config.transformer) {\n                throw new Error(\"You seem to have several transformers\");\n            }\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n    const router = (0,_config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        errorFormatter,\n        transformer,\n        isDev: routerList.some((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.some((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.some((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\n/**\n * TODO: This can be improved:\n * - We should be able to chain `.meta()`/`.context()` only once\n * - Simplify typings\n * - Doesn't need to be a class but it doesn't really hurt either\n */ class TRPCBuilder {\n    context() {\n        return new TRPCBuilder();\n    }\n    meta() {\n        return new TRPCBuilder();\n    }\n    create(options) {\n        return createTRPCInner()(options);\n    }\n}\n/**\n * Initialize tRPC - done exactly once per backend\n */ const initTRPC = new TRPCBuilder();\nfunction createTRPCInner() {\n    return function initTRPCInner(runtime) {\n        const errorFormatter = runtime?.errorFormatter ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.d;\n        const transformer = (0,_config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(runtime?.transformer ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n        const config = {\n            transformer,\n            isDev: runtime?.isDev ?? globalThis.process?.env?.NODE_ENV !== \"production\",\n            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,\n            errorFormatter,\n            isServer: runtime?.isServer ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.i,\n            /**\n       * @internal\n       */ $types: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.c)((key)=>{\n                throw new Error(`Tried to access \"$types.${key}\" which is not available at runtime`);\n            })\n        };\n        {\n            // Server check\n            const isServer = runtime?.isServer ?? _config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.i;\n            if (!isServer && runtime?.allowOutsideOfServer !== true) {\n                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n            }\n        }\n        return {\n            /**\n       * These are just types, they can't be used\n       * @internal\n       */ _config: config,\n            /**\n       * Builder object for creating procedures\n       * @see https://trpc.io/docs/server/procedures\n       */ procedure: createBuilder({\n                meta: runtime?.defaultMeta\n            }),\n            /**\n       * Create reusable middlewares\n       * @see https://trpc.io/docs/server/middlewares\n       */ middleware: createMiddlewareFactory(),\n            /**\n       * Create a router\n       * @see https://trpc.io/docs/server/routers\n       */ router: (0,_config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(config),\n            /**\n       * Merge Routers\n       * @see https://trpc.io/docs/server/merging-routers\n       */ mergeRouters,\n            /**\n       * Create a server-side caller for a router\n       * @see https://trpc.io/docs/server/server-side-calls\n       */ createCallerFactory: (0,_config_e3143f14_mjs__WEBPACK_IMPORTED_MODULE_0__.b)()\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObservable),\n/* harmony export */   o: () => (/* binding */ observable)\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\nfunction isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtYWRlMWJhZDgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsU0FBU0MsQ0FBQztJQUNmLE9BQU9BO0FBQ1g7QUFFQSxjQUFjLEdBQUcsU0FBU0MsY0FBY0MsR0FBRztJQUN2QyxJQUFJQSxJQUFJQyxNQUFNLEtBQUssR0FBRztRQUNsQixPQUFPSjtJQUNYO0lBQ0EsSUFBSUcsSUFBSUMsTUFBTSxLQUFLLEdBQUc7UUFDbEIsb0VBQW9FO1FBQ3BFLE9BQU9ELEdBQUcsQ0FBQyxFQUFFO0lBQ2pCO0lBQ0EsT0FBTyxTQUFTRSxNQUFNQyxLQUFLO1FBQ3ZCLE9BQU9ILElBQUlJLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQyxLQUFLQSxHQUFHRCxPQUFPRjtJQUM1QztBQUNKO0FBRUEsU0FBU0ksYUFBYVQsQ0FBQztJQUNuQixPQUFPLE9BQU9BLE1BQU0sWUFBWUEsTUFBTSxRQUFRLGVBQWVBO0FBQ2pFO0FBQ0EsU0FBU1UsV0FBV0MsU0FBUztJQUN6QixNQUFNQyxPQUFPO1FBQ1RELFdBQVdFLFFBQVE7WUFDZixJQUFJQyxjQUFjO1lBQ2xCLElBQUlDLFNBQVM7WUFDYixJQUFJQyxlQUFlO1lBQ25CLElBQUlDLHNCQUFzQjtZQUMxQixTQUFTQztnQkFDTCxJQUFJSixnQkFBZ0IsTUFBTTtvQkFDdEJHLHNCQUFzQjtvQkFDdEI7Z0JBQ0o7Z0JBQ0EsSUFBSUQsY0FBYztvQkFDZDtnQkFDSjtnQkFDQUEsZUFBZTtnQkFDZixJQUFJLE9BQU9GLGdCQUFnQixZQUFZO29CQUNuQ0E7Z0JBQ0osT0FBTyxJQUFJQSxhQUFhO29CQUNwQkEsWUFBWUksV0FBVztnQkFDM0I7WUFDSjtZQUNBSixjQUFjSCxVQUFVO2dCQUNwQlEsTUFBTUMsS0FBSztvQkFDUCxJQUFJTCxRQUFRO3dCQUNSO29CQUNKO29CQUNBRixTQUFTTSxJQUFJLEdBQUdDO2dCQUNwQjtnQkFDQUMsT0FBT0MsR0FBRztvQkFDTixJQUFJUCxRQUFRO3dCQUNSO29CQUNKO29CQUNBQSxTQUFTO29CQUNURixTQUFTUSxLQUFLLEdBQUdDO29CQUNqQko7Z0JBQ0o7Z0JBQ0FLO29CQUNJLElBQUlSLFFBQVE7d0JBQ1I7b0JBQ0o7b0JBQ0FBLFNBQVM7b0JBQ1RGLFNBQVNVLFFBQVE7b0JBQ2pCTDtnQkFDSjtZQUNKO1lBQ0EsSUFBSUQscUJBQXFCO2dCQUNyQkM7WUFDSjtZQUNBLE9BQU87Z0JBQ0hBO1lBQ0o7UUFDSjtRQUNBTSxNQUFNLEdBQUdDLFVBQVU7WUFDZixPQUFPeEIsY0FBY3dCLFlBQVliO1FBQ3JDO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBRThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLWFkZTFiYWQ4Lm1qcz80MzY0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKChwcmV2LCBmbik9PmZuKHByZXYpLCBpbnB1dCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGwgJiYgJ3N1YnNjcmliZScgaW4geDtcbn1cbmZ1bmN0aW9uIG9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHtcbiAgICAgICAgc3Vic2NyaWJlIChvYnNlcnZlcikge1xuICAgICAgICAgICAgbGV0IHRlYXJkb3duUmVmID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpc0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB1bnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0ZWFyZG93bkltbWVkaWF0ZWx5ID0gZmFsc2U7XG4gICAgICAgICAgICBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd25SZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25JbW1lZGlhdGVseSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZWFyZG93blJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93blJlZigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVhcmRvd25SZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25SZWYudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZWFyZG93blJlZiA9IHN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQ/Lih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvciAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcj8uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGVhcmRvd25JbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwaXBlICguLi5vcGVyYXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKShzZWxmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbmV4cG9ydCB7IGlzT2JzZXJ2YWJsZSBhcyBpLCBvYnNlcnZhYmxlIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJpZGVudGl0eSIsIngiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwibGVuZ3RoIiwicGlwZWQiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsImlzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJzZWxmIiwib2JzZXJ2ZXIiLCJ0ZWFyZG93blJlZiIsImlzRG9uZSIsInVuc3Vic2NyaWJlZCIsInRlYXJkb3duSW1tZWRpYXRlbHkiLCJ1bnN1YnNjcmliZSIsIm5leHQiLCJ2YWx1ZSIsImVycm9yIiwiZXJyIiwiY29tcGxldGUiLCJwaXBlIiwib3BlcmF0aW9ucyIsImkiLCJvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   observable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable-ade1bad8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable-ade1bad8.mjs\");\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ObservableAbortError\";\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError(\"This operation was aborted.\"));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFlatProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createRecursiveProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   getCauseFromUnknown: () => (/* reexport safe */ _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_2__.g),\n/* harmony export */   getErrorShape: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   transformTRPCResponse: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-f91d720c.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformTRPCResponse-1153b421.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _getCauseFromUnknown_2d66414a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../getCauseFromUnknown-2d66414a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../codes-c924c3db.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdGO0FBQ2U7QUFDeEI7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29wZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanM/NzEwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjIGFzIGNyZWF0ZUZsYXRQcm94eSwgYSBhcyBjcmVhdGVSZWN1cnNpdmVQcm94eSB9IGZyb20gJy4uL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldEVycm9yU2hhcGUsIHQgYXMgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldENhdXNlRnJvbVVua25vd24gfSBmcm9tICcuLi9nZXRDYXVzZUZyb21Vbmtub3duLTJkNjY0MTRhLm1qcyc7XG5pbXBvcnQgJy4uL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG4iXSwibmFtZXMiOlsiYyIsImNyZWF0ZUZsYXRQcm94eSIsImEiLCJjcmVhdGVSZWN1cnNpdmVQcm94eSIsImciLCJnZXRFcnJvclNoYXBlIiwidCIsInRyYW5zZm9ybVRSUENSZXNwb25zZSIsImdldENhdXNlRnJvbVVua25vd24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RTtBQUNIO0FBRXBFOztDQUVDLEdBQUcsU0FBU0ksY0FBY0MsSUFBSTtJQUMzQixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxNQUFNLEVBQUcsR0FBR0g7SUFDbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUcsR0FBR0osS0FBS0UsS0FBSztJQUM1QixNQUFNRyxRQUFRO1FBQ1ZDLFNBQVNKLE1BQU1JLE9BQU87UUFDdEJGLE1BQU1OLGtEQUF1QixDQUFDTSxLQUFLO1FBQ25DRyxNQUFNO1lBQ0ZIO1lBQ0FJLFlBQVlaLHNEQUEwQkEsQ0FBQ007UUFDM0M7SUFDSjtJQUNBLElBQUlDLE9BQU9NLEtBQUssSUFBSSxPQUFPVCxLQUFLRSxLQUFLLENBQUNRLEtBQUssS0FBSyxVQUFVO1FBQ3RETCxNQUFNRSxJQUFJLENBQUNHLEtBQUssR0FBR1YsS0FBS0UsS0FBSyxDQUFDUSxLQUFLO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPVCxTQUFTLFVBQVU7UUFDMUJJLE1BQU1FLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtJQUN0QjtJQUNBLE9BQU9FLE9BQU9RLGNBQWMsQ0FBQztRQUN6QixHQUFHWCxJQUFJO1FBQ1BLO0lBQ0o7QUFDSjtBQUVBLFNBQVNPLDBCQUEwQlQsTUFBTSxFQUFFVSxJQUFJO0lBQzNDLElBQUksV0FBV0EsTUFBTTtRQUNqQixPQUFPO1lBQ0gsR0FBR0EsSUFBSTtZQUNQWCxPQUFPQyxPQUFPVyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLWCxLQUFLO1FBQ3pEO0lBQ0o7SUFDQSxJQUFJLFVBQVVXLEtBQUtJLE1BQU0sRUFBRTtRQUN2QixPQUFPO1lBQ0gsR0FBR0osSUFBSTtZQUNQSSxRQUFRO2dCQUNKLEdBQUdKLEtBQUtJLE1BQU07Z0JBQ2RWLE1BQU1KLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtJLE1BQU0sQ0FBQ1YsSUFBSTtZQUM5RDtRQUNKO0lBQ0o7SUFDQSxPQUFPTTtBQUNYO0FBQ0E7O0VBRUUsR0FBRyxTQUFTSyxzQkFBc0JmLE1BQU0sRUFBRWdCLFdBQVc7SUFDbkQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxZQUFZRyxHQUFHLENBQUMsQ0FBQ1QsT0FBT0QsMEJBQTBCVCxRQUFRVSxTQUFTRCwwQkFBMEJULFFBQVFnQjtBQUM3STtBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz8zMjI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ })

};
;