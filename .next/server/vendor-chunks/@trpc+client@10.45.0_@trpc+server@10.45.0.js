"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+client@10.45.0_@trpc+server@10.45.0";
exports.ids = ["vendor-chunks/@trpc+client@10.45.0_@trpc+server@10.45.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === \"TRPCClientError\";\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj.error) && typeof obj.error.code === \"number\" && typeof obj.error.message === \"string\";\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError(\"Unknown error\", {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.getCauseFromUnknown)(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0zOGY5YTMyYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBEO0FBQ0s7QUFFL0QsU0FBU0csa0JBQWtCQyxLQUFLO0lBQzVCLE9BQU9BLGlCQUFpQkMsbUJBQW1COzs7S0FHMUMsR0FBR0QsaUJBQWlCRSxTQUFTRixNQUFNRyxJQUFJLEtBQUs7QUFDakQ7QUFDQSxTQUFTQyxvQkFBb0JDLEdBQUc7SUFDNUIsT0FBT1AsZ0VBQVFBLENBQUNPLFFBQVFQLGdFQUFRQSxDQUFDTyxJQUFJQyxLQUFLLEtBQUssT0FBT0QsSUFBSUMsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWSxPQUFPRixJQUFJQyxLQUFLLENBQUNFLE9BQU8sS0FBSztBQUN0SDtBQUNBLE1BQU1QLHdCQUF3QkM7SUFDMUIsT0FBT08sS0FBS0MsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQzNCLE1BQU1YLFFBQVFVO1FBQ2QsSUFBSVgsa0JBQWtCQyxRQUFRO1lBQzFCLElBQUlXLEtBQUtDLElBQUksRUFBRTtnQkFDWCxnQ0FBZ0M7Z0JBQ2hDWixNQUFNWSxJQUFJLEdBQUc7b0JBQ1QsR0FBR1osTUFBTVksSUFBSTtvQkFDYixHQUFHRCxLQUFLQyxJQUFJO2dCQUNoQjtZQUNKO1lBQ0EsT0FBT1o7UUFDWDtRQUNBLElBQUlJLG9CQUFvQkosUUFBUTtZQUM1QixPQUFPLElBQUlDLGdCQUFnQkQsTUFBTU0sS0FBSyxDQUFDRSxPQUFPLEVBQUU7Z0JBQzVDLEdBQUdHLElBQUk7Z0JBQ1BFLFFBQVFiO1lBQ1o7UUFDSjtRQUNBLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCRSxLQUFJLEdBQUk7WUFDM0IsT0FBTyxJQUFJRCxnQkFBZ0IsaUJBQWlCO2dCQUN4QyxHQUFHVSxJQUFJO2dCQUNQWCxPQUFPQTtZQUNYO1FBQ0o7UUFDQSxPQUFPLElBQUlDLGdCQUFnQkQsTUFBTVEsT0FBTyxFQUFFO1lBQ3RDLEdBQUdHLElBQUk7WUFDUFgsT0FBT0osd0VBQW1CQSxDQUFDSTtRQUMvQjtJQUNKO0lBQ0FjLFlBQVlOLE9BQU8sRUFBRUcsSUFBSSxDQUFDO1FBQ3RCLE1BQU1YLFFBQVFXLE1BQU1YO1FBQ3BCLDZEQUE2RDtRQUM3RCwwREFBMEQ7UUFDMUQsS0FBSyxDQUFDUSxTQUFTO1lBQ1hSO1FBQ0o7UUFDQSxJQUFJLENBQUNZLElBQUksR0FBR0QsTUFBTUM7UUFDbEIsSUFBSSxDQUFDWixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDZSxLQUFLLEdBQUdKLE1BQU1FLFFBQVFQO1FBQzNCLElBQUksQ0FBQ1UsSUFBSSxHQUFHTCxNQUFNRSxRQUFRUCxNQUFNVTtRQUNoQyxJQUFJLENBQUNiLElBQUksR0FBRztRQUNaYyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFakIsZ0JBQWdCa0IsU0FBUztJQUN6RDtBQUNKO0FBRWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9UUlBDQ2xpZW50RXJyb3ItMzhmOWEzMmEubWpzP2Y5YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2F1c2VGcm9tVW5rbm93biB9IGZyb20gJ0B0cnBjL3NlcnZlci9zaGFyZWQnO1xuaW1wb3J0IHsgaSBhcyBpc09iamVjdCB9IGZyb20gJy4vdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyc7XG5cbmZ1bmN0aW9uIGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSB7XG4gICAgcmV0dXJuIGNhdXNlIGluc3RhbmNlb2YgVFJQQ0NsaWVudEVycm9yIHx8IC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogRGVsZXRlIGluIG5leHQgbWFqb3JcbiAgICAgKi8gY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5uYW1lID09PSAnVFJQQ0NsaWVudEVycm9yJztcbn1cbmZ1bmN0aW9uIGlzVFJQQ0Vycm9yUmVzcG9uc2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgaXNPYmplY3Qob2JqLmVycm9yKSAmJiB0eXBlb2Ygb2JqLmVycm9yLmNvZGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmouZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG59XG5jbGFzcyBUUlBDQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGljIGZyb20oX2NhdXNlLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBfY2F1c2U7XG4gICAgICAgIGlmIChpc1RSUENDbGllbnRFcnJvcihjYXVzZSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm1ldGEpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNvcmF0ZSB3aXRoIG1ldGEgZXJyb3IgZGF0YVxuICAgICAgICAgICAgICAgIGNhdXNlLm1ldGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNhdXNlLm1ldGEsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdHMubWV0YVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVFJQQ0Vycm9yUmVzcG9uc2UoY2F1c2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcihjYXVzZS5lcnJvci5tZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGNhdXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShjYXVzZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoJ1Vua25vd24gZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICBjYXVzZTogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBjYXVzZTogZ2V0Q2F1c2VGcm9tVW5rbm93bihjYXVzZSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdHMpe1xuICAgICAgICBjb25zdCBjYXVzZSA9IG9wdHM/LmNhdXNlO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbiAgICAgICAgc3VwZXIobWVzc2FnZSwge1xuICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWV0YSA9IG9wdHM/Lm1ldGE7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICAgICAgdGhpcy5zaGFwZSA9IG9wdHM/LnJlc3VsdD8uZXJyb3I7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdHM/LnJlc3VsdD8uZXJyb3IuZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RSUENDbGllbnRFcnJvcic7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUUlBDQ2xpZW50RXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRSUENDbGllbnRFcnJvciBhcyBUIH07XG4iXSwibmFtZXMiOlsiZ2V0Q2F1c2VGcm9tVW5rbm93biIsImkiLCJpc09iamVjdCIsImlzVFJQQ0NsaWVudEVycm9yIiwiY2F1c2UiLCJUUlBDQ2xpZW50RXJyb3IiLCJFcnJvciIsIm5hbWUiLCJpc1RSUENFcnJvclJlc3BvbnNlIiwib2JqIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImZyb20iLCJfY2F1c2UiLCJvcHRzIiwibWV0YSIsInJlc3VsdCIsImNvbnN0cnVjdG9yIiwic2hhcGUiLCJkYXRhIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader(\"query\"));\n            const mutation = dataLoader(batchLoader(\"mutation\"));\n            const subscription = dataLoader(batchLoader(\"subscription\"));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2h0dHBCYXRjaExpbmstZDBmOWVhYzkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNpQjtBQUNBO0FBQ3NDO0FBRTVHLDJEQUEyRCxHQUFHOztDQUU3RCxHQUFHLE1BQU1XLGtCQUFrQjtJQUN4QixNQUFNLElBQUlDLE1BQU07QUFDcEI7QUFDQTs7OztDQUlDLEdBQUcsU0FBU0MsV0FBV0MsV0FBVztJQUMvQixJQUFJQyxlQUFlO0lBQ25CLElBQUlDLGdCQUFnQjtJQUNwQixNQUFNQyw4QkFBOEI7UUFDaENDLGFBQWFGO1FBQ2JBLGdCQUFnQjtRQUNoQkQsZUFBZTtJQUNuQjtJQUNBOztHQUVELEdBQUcsU0FBU0ksV0FBV0MsS0FBSztRQUN2QixNQUFNQyxlQUFlO1lBQ2pCLEVBQUU7U0FDTDtRQUNELElBQUlDLFFBQVE7UUFDWixNQUFNLEtBQUs7WUFDUCxNQUFNQyxPQUFPSCxLQUFLLENBQUNFLE1BQU07WUFDekIsSUFBSSxDQUFDQyxNQUFNO2dCQUNQO1lBQ0o7WUFDQSxNQUFNQyxZQUFZSCxZQUFZLENBQUNBLGFBQWFJLE1BQU0sR0FBRyxFQUFFO1lBQ3ZELElBQUlGLEtBQUtHLE9BQU8sRUFBRTtnQkFDZCw0Q0FBNEM7Z0JBQzVDSCxLQUFLSSxNQUFNLEdBQUcsSUFBSWYsTUFBTTtnQkFDeEJVO2dCQUNBO1lBQ0o7WUFDQSxNQUFNTSxVQUFVZCxZQUFZZSxRQUFRLENBQUNMLFVBQVVNLE1BQU0sQ0FBQ1AsTUFBTVEsR0FBRyxDQUFDLENBQUNDLEtBQUtBLEdBQUdDLEdBQUc7WUFDNUUsSUFBSUwsU0FBUztnQkFDVEosVUFBVVUsSUFBSSxDQUFDWDtnQkFDZkQ7Z0JBQ0E7WUFDSjtZQUNBLElBQUlFLFVBQVVDLE1BQU0sS0FBSyxHQUFHO2dCQUN4QkYsS0FBS0ks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U0FBU0EsUUFBUUcsSUFBSSxDQUFDLENBQUNpQztnQkFDbkIsTUFBTWUsVUFBVUMsTUFBTUMsT0FBTyxDQUFDakIsSUFBSUUsSUFBSSxJQUFJRixJQUFJRSxJQUFJLEdBQUdqQixTQUFTL0IsR0FBRyxDQUFDLElBQUk4QyxJQUFJRSxJQUFJO2dCQUM5RSxNQUFNbEMsU0FBUytDLFFBQVE3RCxHQUFHLENBQUMsQ0FBQ1IsT0FBUTt3QkFDNUI0RCxNQUFNTixJQUFJTSxJQUFJO3dCQUNkSixNQUFNeEQ7b0JBQ1Y7Z0JBQ0osT0FBT3NCO1lBQ1g7WUFDQVI7UUFDSjtJQUNKO0FBQ0o7QUFDQSxNQUFNa0IsZ0JBQWdCRixvQkFBb0JtQztBQUVjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9odHRwQmF0Y2hMaW5rLWQwZjllYWM5Lm1qcz9mM2IxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyB0IGFzIHRyYW5zZm9ybVJlc3VsdCB9IGZyb20gJy4vdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENDbGllbnRFcnJvciB9IGZyb20gJy4vVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyc7XG5pbXBvcnQgeyByIGFzIHJlc29sdmVIVFRQTGlua09wdGlvbnMsIGcgYXMgZ2V0VXJsLCBqIGFzIGpzb25IdHRwUmVxdWVzdGVyIH0gZnJvbSAnLi9odHRwVXRpbHMtYjlkMGNiNDgubWpzJztcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqLyAvKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkIHVubGVzcyB3ZSBtZXNzZWQgc29tZXRoaW5nIHVwLlxuICovIGNvbnN0IHRocm93RmF0YWxFcnJvciA9ICgpPT57XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHN1Ym1pdCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL2lzc3Vlcy9uZXcnKTtcbn07XG4vKipcbiAqIERhdGFsb2FkZXIgdGhhdCdzIHZlcnkgaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZGF0YWxvYWRlclxuICogTGVzcyBjb25maWd1cmF0aW9uLCBubyBjYWNoaW5nLCBhbmQgYWxsb3dzIHlvdSB0byBjYW5jZWwgcmVxdWVzdHNcbiAqIFdoZW4gY2FuY2VsbGluZyBhIHNpbmdsZSBmZXRjaCB0aGUgd2hvbGUgYmF0Y2ggd2lsbCBiZSBjYW5jZWxsZWQgb25seSB3aGVuIF9hbGxfIGl0ZW1zIGFyZSBjYW5jZWxsZWRcbiAqLyBmdW5jdGlvbiBkYXRhTG9hZGVyKGJhdGNoTG9hZGVyKSB7XG4gICAgbGV0IHBlbmRpbmdJdGVtcyA9IG51bGw7XG4gICAgbGV0IGRpc3BhdGNoVGltZXIgPSBudWxsO1xuICAgIGNvbnN0IGRlc3Ryb3lUaW1lckFuZFBlbmRpbmdJdGVtcyA9ICgpPT57XG4gICAgICAgIGNsZWFyVGltZW91dChkaXNwYXRjaFRpbWVyKTtcbiAgICAgICAgZGlzcGF0Y2hUaW1lciA9IG51bGw7XG4gICAgICAgIHBlbmRpbmdJdGVtcyA9IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICogSXRlcmF0ZSB0aHJvdWdoIHRoZSBpdGVtcyBhbmQgc3BsaXQgdGhlbSBpbnRvIGdyb3VwcyBiYXNlZCBvbiB0aGUgYGJhdGNoTG9hZGVyYCdzIHZhbGlkYXRlIGZ1bmN0aW9uXG4gICAqLyBmdW5jdGlvbiBncm91cEl0ZW1zKGl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwZWRJdGVtcyA9IFtcbiAgICAgICAgICAgIFtdXG4gICAgICAgIF07XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGFzdEdyb3VwID0gZ3JvdXBlZEl0ZW1zW2dyb3VwZWRJdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChpdGVtLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBJdGVtIHdhcyBhYm9ydGVkIGJlZm9yZSBpdCB3YXMgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgICAgIGl0ZW0ucmVqZWN0Py4obmV3IEVycm9yKCdBYm9ydGVkJykpO1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gYmF0Y2hMb2FkZXIudmFsaWRhdGUobGFzdEdyb3VwLmNvbmNhdChpdGVtKS5tYXAoKGl0KT0+aXQua2V5KSk7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGxhc3RHcm91cC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdEdyb3VwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVqZWN0Py4obmV3IEVycm9yKCdJbnB1dCBpcyB0b28gYmlnIGZvciBhIHNpbmdsZSBkaXNwYXRjaCcpKTtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBncm91cCwgbmV4dCBpdGVyYXRpb24gd2lsbCB0cnkgdG8gYWRkIHRoZSBpdGVtIHRvIHRoYXRcbiAgICAgICAgICAgIGdyb3VwZWRJdGVtcy5wdXNoKFtdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JvdXBlZEl0ZW1zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBlZEl0ZW1zID0gZ3JvdXBJdGVtcyhwZW5kaW5nSXRlbXMpO1xuICAgICAgICBkZXN0cm95VGltZXJBbmRQZW5kaW5nSXRlbXMoKTtcbiAgICAgICAgLy8gQ3JlYXRlIGJhdGNoZXMgZm9yIGVhY2ggZ3JvdXAgb2YgaXRlbXNcbiAgICAgICAgZm9yIChjb25zdCBpdGVtcyBvZiBncm91cGVkSXRlbXMpe1xuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJhdGNoID0ge1xuICAgICAgICAgICAgICAgIGl0ZW1zLFxuICAgICAgICAgICAgICAgIGNhbmNlbDogdGhyb3dGYXRhbEVycm9yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKXtcbiAgICAgICAgICAgICAgICBpdGVtLmJhdGNoID0gYmF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1bml0UmVzb2x2ZXIgPSAoaW5kZXgsIHZhbHVlKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBiYXRjaC5pdGVtc1tpbmRleF07XG4gICAgICAgICAgICAgICAgaXRlbS5yZXNvbHZlPy4odmFsdWUpO1xuICAgICAgICAgICAgICAgIGl0ZW0uYmF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpdGVtLnJlc29sdmUgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGJhdGNoTG9hZGVyLmZldGNoKGJhdGNoLml0ZW1zLm1hcCgoX2l0ZW0pPT5faXRlbS5rZXkpLCB1bml0UmVzb2x2ZXIpO1xuICAgICAgICAgICAgYmF0Y2guY2FuY2VsID0gY2FuY2VsO1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKChyZXN1bHQpPT57XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdWx0W2ldO1xuICAgICAgICAgICAgICAgICAgICB1bml0UmVzb2x2ZXIoaSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYmF0Y2guaXRlbXMpe1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlamVjdD8uKG5ldyBFcnJvcignTWlzc2luZyByZXN1bHQnKSk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYmF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKChjYXVzZSk9PntcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYmF0Y2guaXRlbXMpe1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlamVjdD8uKGNhdXNlKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5iYXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbG9hZChrZXkpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgYmF0Y2g6IG51bGwsXG4gICAgICAgICAgICByZXNvbHZlOiB0aHJvd0ZhdGFsRXJyb3IsXG4gICAgICAgICAgICByZWplY3Q6IHRocm93RmF0YWxFcnJvclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgICAgIGl0ZW0ucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgaXRlbS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIGlmICghcGVuZGluZ0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ0l0ZW1zID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwZW5kaW5nSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZGlzcGF0Y2hUaW1lcikge1xuICAgICAgICAgICAgZGlzcGF0Y2hUaW1lciA9IHNldFRpbWVvdXQoZGlzcGF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbmNlbCA9ICgpPT57XG4gICAgICAgICAgICBpdGVtLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGl0ZW0uYmF0Y2g/Lml0ZW1zLmV2ZXJ5KChpdGVtKT0+aXRlbS5hYm9ydGVkKSkge1xuICAgICAgICAgICAgICAgIC8vIEFsbCBpdGVtcyBpbiB0aGUgYmF0Y2ggaGF2ZSBiZWVuIGNhbmNlbGxlZFxuICAgICAgICAgICAgICAgIGl0ZW0uYmF0Y2guY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgaXRlbS5iYXRjaCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9taXNlLFxuICAgICAgICAgICAgY2FuY2VsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvYWRcbiAgICB9O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGNyZWF0ZUhUVFBCYXRjaExpbmsocmVxdWVzdGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBCYXRjaExpbmsob3B0cykge1xuICAgICAgICBjb25zdCByZXNvbHZlZE9wdHMgPSByZXNvbHZlSFRUUExpbmtPcHRpb25zKG9wdHMpO1xuICAgICAgICBjb25zdCBtYXhVUkxMZW5ndGggPSBvcHRzLm1heFVSTExlbmd0aCA/PyBJbmZpbml0eTtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZWQgY29uZmlnXG4gICAgICAgIHJldHVybiAocnVudGltZSk9PntcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoTG9hZGVyID0gKHR5cGUpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGUgPSAoYmF0Y2hPcHMpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhVUkxMZW5ndGggPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgaGF0Y2ggZm9yIHF1aWNrIGNhbGNzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gYmF0Y2hPcHMubWFwKChvcCk9Pm9wLnBhdGgpLmpvaW4oJywnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gYmF0Y2hPcHMubWFwKChvcCk9Pm9wLmlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZ2V0VXJsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlc29sdmVkT3B0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5sZW5ndGggPD0gbWF4VVJMTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgZmV0Y2ggPSByZXF1ZXN0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZE9wdHMsXG4gICAgICAgICAgICAgICAgICAgIHJ1bnRpbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG9wdHNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gZGF0YUxvYWRlcihiYXRjaExvYWRlcigncXVlcnknKSk7XG4gICAgICAgICAgICBjb25zdCBtdXRhdGlvbiA9IGRhdGFMb2FkZXIoYmF0Y2hMb2FkZXIoJ211dGF0aW9uJykpO1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gZGF0YUxvYWRlcihiYXRjaExvYWRlcignc3Vic2NyaXB0aW9uJykpO1xuICAgICAgICAgICAgY29uc3QgbG9hZGVycyA9IHtcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgbXV0YXRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gKHsgb3AgIH0pPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2FkZXIgPSBsb2FkZXJzW29wLnR5cGVdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHByb21pc2UgLCBjYW5jZWwgIH0gPSBsb2FkZXIubG9hZChvcCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBfcmVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXMgPSByZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybVJlc3VsdChyZXMuanNvbiwgcnVudGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWVkLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoVFJQQ0NsaWVudEVycm9yLmZyb20odHJhbnNmb3JtZWQuZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YTogcmVzLm1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogcmVzLm1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB0cmFuc2Zvcm1lZC5yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycik9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGVyciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGE6IF9yZXM/Lm1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmNvbnN0IGJhdGNoUmVxdWVzdGVyID0gKHJlcXVlc3Rlck9wdHMpPT57XG4gICAgcmV0dXJuIChiYXRjaE9wcyk9PntcbiAgICAgICAgY29uc3QgcGF0aCA9IGJhdGNoT3BzLm1hcCgob3ApPT5vcC5wYXRoKS5qb2luKCcsJyk7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IGJhdGNoT3BzLm1hcCgob3ApPT5vcC5pbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGpzb25IdHRwUmVxdWVzdGVyKHtcbiAgICAgICAgICAgIC4uLnJlcXVlc3Rlck9wdHMsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgaW5wdXRzLFxuICAgICAgICAgICAgaGVhZGVycyAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0ZXJPcHRzLm9wdHMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdGVyT3B0cy5vcHRzLmhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Rlck9wdHMub3B0cy5oZWFkZXJzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wTGlzdDogYmF0Y2hPcHNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ZXJPcHRzLm9wdHMuaGVhZGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICBjb25zdCByZXNKU09OID0gQXJyYXkuaXNBcnJheShyZXMuanNvbikgPyByZXMuanNvbiA6IGJhdGNoT3BzLm1hcCgoKT0+cmVzLmpzb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc0pTT04ubWFwKChpdGVtKT0+KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGE6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAganNvbjogaXRlbVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2FuY2VsXG4gICAgICAgIH07XG4gICAgfTtcbn07XG5jb25zdCBodHRwQmF0Y2hMaW5rID0gY3JlYXRlSFRUUEJhdGNoTGluayhiYXRjaFJlcXVlc3Rlcik7XG5cbmV4cG9ydCB7IGNyZWF0ZUhUVFBCYXRjaExpbmsgYXMgYywgaHR0cEJhdGNoTGluayBhcyBoIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsInQiLCJ0cmFuc2Zvcm1SZXN1bHQiLCJUIiwiVFJQQ0NsaWVudEVycm9yIiwiciIsInJlc29sdmVIVFRQTGlua09wdGlvbnMiLCJnIiwiZ2V0VXJsIiwiaiIsImpzb25IdHRwUmVxdWVzdGVyIiwidGhyb3dGYXRhbEVycm9yIiwiRXJyb3IiLCJkYXRhTG9hZGVyIiwiYmF0Y2hMb2FkZXIiLCJwZW5kaW5nSXRlbXMiLCJkaXNwYXRjaFRpbWVyIiwiZGVzdHJveVRpbWVyQW5kUGVuZGluZ0l0ZW1zIiwiY2xlYXJUaW1lb3V0IiwiZ3JvdXBJdGVtcyIsIml0ZW1zIiwiZ3JvdXBlZEl0ZW1zIiwiaW5kZXgiLCJpdGVtIiwibGFzdEdyb3VwIiwibGVuZ3RoIiwiYWJvcnRlZCIsInJlamVjdCIsImlzVmFsaWQiLCJ2YWxpZGF0ZSIsImNvbmNhdCIsIm1hcCIsIml0Iiwia2V5IiwicHVzaCIsImRpc3BhdGNoIiwiYmF0Y2giLCJjYW5jZWwiLCJ1bml0UmVzb2x2ZXIiLCJ2YWx1ZSIsInJlc29sdmUiLCJwcm9taXNlIiwiZmV0Y2giLCJfaXRlbSIsInRoZW4iLCJyZXN1bHQiLCJpIiwiY2F0Y2giLCJjYXVzZSIsImxvYWQiLCJQcm9taXNlIiwic2V0VGltZW91dCIsImV2ZXJ5IiwiY3JlYXRlSFRUUEJhdGNoTGluayIsInJlcXVlc3RlciIsImh0dHBCYXRjaExpbmsiLCJvcHRzIiwicmVzb2x2ZWRPcHRzIiwibWF4VVJMTGVuZ3RoIiwiSW5maW5pdHkiLCJydW50aW1lIiwidHlwZSIsImJhdGNoT3BzIiwicGF0aCIsIm9wIiwiam9pbiIsImlucHV0cyIsImlucHV0IiwidXJsIiwicXVlcnkiLCJtdXRhdGlvbiIsInN1YnNjcmlwdGlvbiIsImxvYWRlcnMiLCJvYnNlcnZlciIsImxvYWRlciIsIl9yZXMiLCJ1bmRlZmluZWQiLCJyZXMiLCJ0cmFuc2Zvcm1lZCIsImpzb24iLCJvayIsImVycm9yIiwiZnJvbSIsIm1ldGEiLCJuZXh0IiwiY29udGV4dCIsImNvbXBsZXRlIiwiZXJyIiwiYmF0Y2hSZXF1ZXN0ZXIiLCJyZXF1ZXN0ZXJPcHRzIiwiaGVhZGVycyIsIm9wTGlzdCIsInJlc0pTT04iLCJBcnJheSIsImlzQXJyYXkiLCJjIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error(\"No fetch implementation found\");\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, \"\"),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + \"/\" + opts.path;\n    const queryParts = [];\n    if (\"inputs\" in opts) {\n        queryParts.push(\"batch=1\");\n    }\n    if (opts.type === \"query\") {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += \"?\" + queryParts.join(\"&\");\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\") {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n        throw new Error(\"Subscriptions should use wsLink\");\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            \"content-type\": opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            \"trpc-batch-mode\": opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-d0f9eac9.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener(\"abort\", abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === \"started\") {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === \"stopped\") {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if (\"input\" in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === \"__untypedClient\") {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join(\".\");\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error(\"No TextDecoder implementation found\");\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === \"}\") {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(\":\");\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = \"\";\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split(\"\\n\");\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if (\"getReader\" in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on(\"data\", onChunk);\n        stream.on(\"end\", resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error(\"Received response without body\");\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!(\"input\" in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error(\"Input is not FormData\");\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== \"mutation\") {\n        // TODO(?) handle formdata queries\n        throw new Error(\"We only handle mutations with formdata\");\n    }\n    return (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-b9d0cb48.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === \"function\") {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFEO0FBQ2tCO0FBQ0E7QUFDeUI7QUFDbkU7QUFFN0IsU0FBU1MsZ0JBQWdCQyxXQUFXO0lBQ2hDLE9BQU8sQ0FBQ0M7UUFDSixNQUFNQyxlQUFlTiwwREFBc0JBLENBQUNLO1FBQzVDLE9BQU8sQ0FBQ0UsVUFBVSxDQUFDLEVBQUVDLEVBQUUsRUFBRyxHQUFHZCxtRUFBVUEsQ0FBQyxDQUFDZTtvQkFDN0IsTUFBTSxFQUFFQyxJQUFJLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUdKO29CQUNqQyxNQUFNLEVBQUVLLE9BQU8sRUFBR0MsTUFBTSxFQUFHLEdBQUdWLFlBQVlXLFNBQVMsQ0FBQzt3QkFDaEQsR0FBR1QsWUFBWTt3QkFDZkM7d0JBQ0FLO3dCQUNBRjt3QkFDQUM7d0JBQ0FLOzRCQUNJLElBQUksQ0FBQ1gsS0FBS1csT0FBTyxFQUFFO2dDQUNmLE9BQU8sQ0FBQzs0QkFDWjs0QkFDQSxJQUFJLE9BQU9YLEtBQUtXLE9BQU8sS0FBSyxZQUFZO2dDQUNwQyxPQUFPWCxLQUFLVyxPQUFPLENBQUM7b0NBQ2hCUjtnQ0FDSjs0QkFDSjs0QkFDQSxPQUFPSCxLQUFLVyxPQUFPO3dCQUN2QjtvQkFDSjtvQkFDQSxJQUFJQyxPQUFPQztvQkFDWEwsUUFBUU0sSUFBSSxDQUFDLENBQUNDO3dCQUNWSCxPQUFPRyxJQUFJSCxJQUFJO3dCQUNmLE1BQU1JLGNBQWN6QixnRUFBZUEsQ0FBQ3dCLElBQUlFLElBQUksRUFBRWY7d0JBQzlDLElBQUksQ0FBQ2MsWUFBWUUsRUFBRSxFQUFFOzRCQUNqQmQsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNKLFlBQVlHLEtBQUssRUFBRTtnQ0FDbkRQOzRCQUNKOzRCQUNBO3dCQUNKO3dCQUNBUixTQUFTaUIsSUFBSSxDQUFDOzRCQUNWQyxTQUFTUCxJQUFJSCxJQUFJOzRCQUNqQlcsUUFBUVAsWUFBWU8sTUFBTTt3QkFDOUI7d0JBQ0FuQixTQUFTb0IsUUFBUTtvQkFDckIsR0FBR0MsS0FBSyxDQUFDLENBQUNDO3dCQUNOdEIsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNNLE9BQU87NEJBQ3ZDZDt3QkFDSjtvQkFDSjtvQkFDQSxPQUFPO3dCQUNISDtvQkFDSjtnQkFDSjtJQUNaO0FBQ0o7QUFDQTs7Q0FFQyxHQUFHLE1BQU1rQixXQUFXN0IsZ0JBQWdCO0lBQ2pDWSxXQUFXYixzREFBaUJBO0FBQ2hDO0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9saW5rcy9odHRwTGluay5tanM/NzJhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHsgdCBhcyB0cmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi4vVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyc7XG5pbXBvcnQgeyByIGFzIHJlc29sdmVIVFRQTGlua09wdGlvbnMsIGogYXMganNvbkh0dHBSZXF1ZXN0ZXIgfSBmcm9tICcuLi9odHRwVXRpbHMtYjlkMGNiNDgubWpzJztcbmltcG9ydCAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5cbmZ1bmN0aW9uIGh0dHBMaW5rRmFjdG9yeShmYWN0b3J5T3B0cykge1xuICAgIHJldHVybiAob3B0cyk9PntcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRPcHRzID0gcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgcmV0dXJuIChydW50aW1lKT0+KHsgb3AgIH0pPT5vYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoICwgaW5wdXQgLCB0eXBlICB9ID0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGZhY3RvcnlPcHRzLnJlcXVlc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZE9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEgPSByZXMubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtUmVzdWx0KHJlcy5qc29uLCBydW50aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtZWQub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbSh0cmFuc2Zvcm1lZC5lcnJvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogdHJhbnNmb3JtZWQucmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChjYXVzZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGNhdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwTGlua1xuICovIGNvbnN0IGh0dHBMaW5rID0gaHR0cExpbmtGYWN0b3J5KHtcbiAgICByZXF1ZXN0ZXI6IGpzb25IdHRwUmVxdWVzdGVyXG59KTtcblxuZXhwb3J0IHsgaHR0cExpbmssIGh0dHBMaW5rRmFjdG9yeSB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJ0IiwidHJhbnNmb3JtUmVzdWx0IiwiVCIsIlRSUENDbGllbnRFcnJvciIsInIiLCJyZXNvbHZlSFRUUExpbmtPcHRpb25zIiwiaiIsImpzb25IdHRwUmVxdWVzdGVyIiwiaHR0cExpbmtGYWN0b3J5IiwiZmFjdG9yeU9wdHMiLCJvcHRzIiwicmVzb2x2ZWRPcHRzIiwicnVudGltZSIsIm9wIiwib2JzZXJ2ZXIiLCJwYXRoIiwiaW5wdXQiLCJ0eXBlIiwicHJvbWlzZSIsImNhbmNlbCIsInJlcXVlc3RlciIsImhlYWRlcnMiLCJtZXRhIiwidW5kZWZpbmVkIiwidGhlbiIsInJlcyIsInRyYW5zZm9ybWVkIiwianNvbiIsIm9rIiwiZXJyb3IiLCJmcm9tIiwibmV4dCIsImNvbnRleHQiLCJyZXN1bHQiLCJjb21wbGV0ZSIsImNhdGNoIiwiY2F1c2UiLCJodHRwTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1b[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === \"up\") {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: \"result\" in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === \"up\" ? light : dark}; \n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === \"up\") {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = \"css\" })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? \"ansi\" : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: \"up\"\n                }) && logger({\n                    ...op,\n                    direction: \"up\"\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: \"down\",\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = \"connecting\";\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== \"open\" || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === \"closed\") {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = \"connecting\";\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = \"connecting\";\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === \"subscription\") {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === \"function\" ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener(\"open\", ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = \"open\";\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener(\"error\", ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === \"reconnect\" && conn === activeConnection) {\n                if (state === \"open\") {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === \"subscription\") {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if (\"result\" in data && data.result.type === \"stopped\" && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener(\"message\", ({ data })=>{\n            const msg = JSON.parse(data);\n            if (\"method\" in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === \"closed\") {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener(\"close\", ({ code })=>{\n            if (state === \"open\") {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === \"closed\") {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === \"subscription\") {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError(\"WebSocket closed prematurely\")));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === \"subscription\") {\n                outgoing.push({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = \"closed\";\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== \"subscription\") {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL3dzTGluay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXFEO0FBQ2tCO0FBQ0E7QUFDMUM7QUFFN0IscUNBQXFDLEdBQUcsTUFBTUssYUFBYSxDQUFDQyxlQUFlQSxpQkFBaUIsSUFBSSxJQUFJQyxLQUFLQyxHQUFHLENBQUMsT0FBTyxLQUFLRixjQUFjO0FBRXZJLFNBQVNHLGVBQWVDLElBQUk7SUFDeEIsTUFBTSxFQUFFQyxHQUFHLEVBQUdDLFdBQVdDLGdCQUFnQkQsU0FBUyxFQUFHRSxjQUFjQyxlQUFlVixVQUFVLEVBQUdXLE1BQU0sRUFBR0MsT0FBTyxFQUFLLEdBQUdQO0lBQ3ZILHFDQUFxQyxHQUFHLElBQUksQ0FBQ0csZUFBZTtRQUN4RCxNQUFNLElBQUlLLE1BQU07SUFDcEI7SUFDQTs7R0FFRCxHQUFHLElBQUlDLFdBQVcsRUFBRTtJQUNuQixNQUFNQyxrQkFBa0JDLE9BQU9DLE1BQU0sQ0FBQztJQUN0QyxJQUFJQyxpQkFBaUI7SUFDckIsSUFBSUMsZ0JBQWdCO0lBQ3BCLElBQUlDLGVBQWU7SUFDbkIsSUFBSUMsbUJBQW1CQztJQUN2QixJQUFJQyxRQUFRO0lBQ1o7O0dBRUQsR0FBRyxTQUFTQztRQUNQLElBQUlELFVBQVUsVUFBVUosZUFBZTtZQUNuQztRQUNKO1FBQ0FBLGdCQUFnQk0sV0FBVztZQUN2Qk4sZ0JBQWdCO1lBQ2hCLElBQUlMLFNBQVNZLE1BQU0sS0FBSyxHQUFHO2dCQUN2QixjQUFjO2dCQUNkTCxpQkFBaUJNLElBQUksQ0FBQ0MsS0FBS0MsU0FBUyxDQUFDZixTQUFTZ0IsR0FBRztZQUNyRCxPQUFPO2dCQUNILGFBQWE7Z0JBQ2JULGlCQUFpQk0sSUFBSSxDQUFDQyxLQUFLQyxTQUFTLENBQUNmO1lBQ3pDO1lBQ0EsUUFBUTtZQUNS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R0FBR3RGO1FBQ3BCLE9BQU8sQ0FBQyxFQUFFaUQsRUFBRSxFQUFHO1lBQ1gsT0FBTzNELG1FQUFVQSxDQUFDLENBQUNpRztnQkFDZixNQUFNLEVBQUU1QyxJQUFJLEVBQUc0QixJQUFJLEVBQUd2QixFQUFFLEVBQUd3QyxPQUFPLEVBQUcsR0FBR3ZDO2dCQUN4QyxNQUFNcUIsUUFBUWUsUUFBUUksV0FBVyxDQUFDQyxTQUFTLENBQUN6QyxHQUFHcUIsS0FBSztnQkFDcEQsTUFBTXFCLFFBQVFMLE9BQU9wQyxPQUFPLENBQUM7b0JBQ3pCUDtvQkFDQTRCO29CQUNBRDtvQkFDQXRCO29CQUNBd0M7Z0JBQ0osR0FBRztvQkFDQ3JCLE9BQU95QixHQUFHO3dCQUNOTCxTQUFTcEIsS0FBSyxDQUFDeUI7d0JBQ2ZEO29CQUNKO29CQUNBOUM7d0JBQ0kwQyxTQUFTMUMsUUFBUTtvQkFDckI7b0JBQ0FjLE1BQU1xQixPQUFPO3dCQUNULE1BQU1hLGNBQWNyRyxnRUFBZUEsQ0FBQ3dGLFNBQVNLO3dCQUM3QyxJQUFJLENBQUNRLFlBQVlDLEVBQUUsRUFBRTs0QkFDakJQLFNBQVNwQixLQUFLLENBQUN6RSw0REFBZUEsQ0FBQzBFLElBQUksQ0FBQ3lCLFlBQVkxQixLQUFLOzRCQUNyRDt3QkFDSjt3QkFDQW9CLFNBQVM1QixJQUFJLENBQUM7NEJBQ1ZFLFFBQVFnQyxZQUFZaEMsTUFBTTt3QkFDOUI7d0JBQ0EsSUFBSVosR0FBR04sSUFBSSxLQUFLLGdCQUFnQjs0QkFDNUIsK0RBQStEOzRCQUMvRGdEOzRCQUNBSixTQUFTMUMsUUFBUTt3QkFDckI7b0JBQ0o7Z0JBQ0o7Z0JBQ0EsT0FBTztvQkFDSDhDO2dCQUNKO1lBQ0o7UUFDSjtJQUNKO0FBQ0o7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29wZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL3dzTGluay5tanM/Yjc4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHsgdCBhcyB0cmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi4vVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyc7XG5pbXBvcnQgJ0B0cnBjL3NlcnZlci9zaGFyZWQnO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBAcHJlc2VydmUgKi8gY29uc3QgcmV0cnlEZWxheSA9IChhdHRlbXB0SW5kZXgpPT5hdHRlbXB0SW5kZXggPT09IDAgPyAwIDogTWF0aC5taW4oMTAwMCAqIDIgKiogYXR0ZW1wdEluZGV4LCAzMDAwMCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVdTQ2xpZW50KG9wdHMpIHtcbiAgICBjb25zdCB7IHVybCAsIFdlYlNvY2tldDogV2ViU29ja2V0SW1wbCA9IFdlYlNvY2tldCAsIHJldHJ5RGVsYXlNczogcmV0cnlEZWxheUZuID0gcmV0cnlEZWxheSAsIG9uT3BlbiAsIG9uQ2xvc2UgLCAgfSA9IG9wdHM7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gQHByZXNlcnZlICovIGlmICghV2ViU29ja2V0SW1wbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBXZWJTb2NrZXQgaW1wbGVtZW50YXRpb24gZm91bmQgLSB5b3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byB1c2UgdGhpcyBvbiB0aGUgc2VydmVyLCBidXQgaWYgeW91IGRvIHlvdSBuZWVkIHRvIHBhc3MgYSBgV2ViU29ja2V0YC1wb255ZmlsbFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIG91dGdvaW5nIG1lc3NhZ2VzIGJ1ZmZlciB3aGlsc3Qgbm90IG9wZW5cbiAgICovIGxldCBvdXRnb2luZyA9IFtdO1xuICAgIGNvbnN0IHBlbmRpbmdSZXF1ZXN0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGV0IGNvbm5lY3RBdHRlbXB0ID0gMDtcbiAgICBsZXQgZGlzcGF0Y2hUaW1lciA9IG51bGw7XG4gICAgbGV0IGNvbm5lY3RUaW1lciA9IG51bGw7XG4gICAgbGV0IGFjdGl2ZUNvbm5lY3Rpb24gPSBjcmVhdGVXUygpO1xuICAgIGxldCBzdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICAvKipcbiAgICogdHJpZXMgdG8gc2VuZCB0aGUgbGlzdCBvZiBtZXNzYWdlc1xuICAgKi8gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIGlmIChzdGF0ZSAhPT0gJ29wZW4nIHx8IGRpc3BhdGNoVGltZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaFRpbWVyID0gc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgZGlzcGF0Y2hUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBpZiAob3V0Z29pbmcubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gc2luZ2xlIHNlbmRcbiAgICAgICAgICAgICAgICBhY3RpdmVDb25uZWN0aW9uLnNlbmQoSlNPTi5zdHJpbmdpZnkob3V0Z29pbmcucG9wKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYmF0Y2ggc2VuZFxuICAgICAgICAgICAgICAgIGFjdGl2ZUNvbm5lY3Rpb24uc2VuZChKU09OLnN0cmluZ2lmeShvdXRnb2luZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYXJcbiAgICAgICAgICAgIG91dGdvaW5nID0gW107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cnlSZWNvbm5lY3QoKSB7XG4gICAgICAgIGlmIChjb25uZWN0VGltZXIgIT09IG51bGwgfHwgc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGltZW91dCA9IHJldHJ5RGVsYXlGbihjb25uZWN0QXR0ZW1wdCsrKTtcbiAgICAgICAgcmVjb25uZWN0SW5Ncyh0aW1lb3V0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVjb25uZWN0KCkge1xuICAgICAgICBzdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICAgICAgY29uc3Qgb2xkQ29ubmVjdGlvbiA9IGFjdGl2ZUNvbm5lY3Rpb247XG4gICAgICAgIGFjdGl2ZUNvbm5lY3Rpb24gPSBjcmVhdGVXUygpO1xuICAgICAgICBjbG9zZUlmTm9QZW5kaW5nKG9sZENvbm5lY3Rpb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNvbm5lY3RJbk1zKG1zKSB7XG4gICAgICAgIGlmIChjb25uZWN0VGltZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICAgICAgY29ubmVjdFRpbWVyID0gc2V0VGltZW91dChyZWNvbm5lY3QsIG1zKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VJZk5vUGVuZGluZyhjb25uKSB7XG4gICAgICAgIC8vIGRpc2Nvbm5lY3QgYXMgc29vbiBhcyB0aGVyZSBhcmUgYXJlIG5vIHBlbmRpbmcgcmVzdWx0XG4gICAgICAgIGNvbnN0IGhhc1BlbmRpbmdSZXF1ZXN0cyA9IE9iamVjdC52YWx1ZXMocGVuZGluZ1JlcXVlc3RzKS5zb21lKChwKT0+cC53cyA9PT0gY29ubik7XG4gICAgICAgIGlmICghaGFzUGVuZGluZ1JlcXVlc3RzKSB7XG4gICAgICAgICAgICBjb25uLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VBY3RpdmVTdWJzY3JpcHRpb25zKCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHBlbmRpbmdSZXF1ZXN0cykuZm9yRWFjaCgocmVxKT0+e1xuICAgICAgICAgICAgaWYgKHJlcS50eXBlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlcS5jYWxsYmFja3MuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3VtZVN1YnNjcmlwdGlvbk9uUmVjb25uZWN0KHJlcSkge1xuICAgICAgICBpZiAob3V0Z29pbmcuc29tZSgocik9PnIuaWQgPT09IHJlcS5vcC5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0KHJlcS5vcCwgcmVxLmNhbGxiYWNrcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVdTKCkge1xuICAgICAgICBjb25zdCB1cmxTdHJpbmcgPSB0eXBlb2YgdXJsID09PSAnZnVuY3Rpb24nID8gdXJsKCkgOiB1cmw7XG4gICAgICAgIGNvbnN0IGNvbm4gPSBuZXcgV2ViU29ja2V0SW1wbCh1cmxTdHJpbmcpO1xuICAgICAgICBjbGVhclRpbWVvdXQoY29ubmVjdFRpbWVyKTtcbiAgICAgICAgY29ubmVjdFRpbWVyID0gbnVsbDtcbiAgICAgICAgY29ubi5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCk9PntcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEBwcmVzZXJ2ZSAqLyBpZiAoY29ubiAhPT0gYWN0aXZlQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbm5lY3RBdHRlbXB0ID0gMDtcbiAgICAgICAgICAgIHN0YXRlID0gJ29wZW4nO1xuICAgICAgICAgICAgb25PcGVuPy4oKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25uLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCk9PntcbiAgICAgICAgICAgIGlmIChjb25uID09PSBhY3RpdmVDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdHJ5UmVjb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBoYW5kbGVJbmNvbWluZ1JlcXVlc3QgPSAocmVxKT0+e1xuICAgICAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09ICdyZWNvbm5lY3QnICYmIGNvbm4gPT09IGFjdGl2ZUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPy4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgLy8gbm90aWZ5IHN1YnNjcmliZXJzXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwZW5kaW5nUmVxIG9mIE9iamVjdC52YWx1ZXMocGVuZGluZ1JlcXVlc3RzKSl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nUmVxLnR5cGUgPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bWVTdWJzY3JpcHRpb25PblJlY29ubmVjdChwZW5kaW5nUmVxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlSW5jb21pbmdSZXNwb25zZSA9IChkYXRhKT0+e1xuICAgICAgICAgICAgY29uc3QgcmVxID0gZGF0YS5pZCAhPT0gbnVsbCAmJiBwZW5kaW5nUmVxdWVzdHNbZGF0YS5pZF07XG4gICAgICAgICAgICBpZiAoIXJlcSkge1xuICAgICAgICAgICAgICAgIC8vIGRvIHNvbWV0aGluZz9cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXEuY2FsbGJhY2tzLm5leHQ/LihkYXRhKTtcbiAgICAgICAgICAgIGlmIChyZXEud3MgIT09IGFjdGl2ZUNvbm5lY3Rpb24gJiYgY29ubiA9PT0gYWN0aXZlQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFdzID0gcmVxLndzO1xuICAgICAgICAgICAgICAgIC8vIGdyYWNlZnVsbHkgcmVwbGFjZSBvbGQgY29ubmVjdGlvbiB3aXRoIHRoaXNcbiAgICAgICAgICAgICAgICByZXEud3MgPSBhY3RpdmVDb25uZWN0aW9uO1xuICAgICAgICAgICAgICAgIGNsb3NlSWZOb1BlbmRpbmcob2xkV3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdyZXN1bHQnIGluIGRhdGEgJiYgZGF0YS5yZXN1bHQudHlwZSA9PT0gJ3N0b3BwZWQnICYmIGNvbm4gPT09IGFjdGl2ZUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXEuY2FsbGJhY2tzLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsICh7IGRhdGEgIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgaWYgKCdtZXRob2QnIGluIG1zZykge1xuICAgICAgICAgICAgICAgIGhhbmRsZUluY29taW5nUmVxdWVzdChtc2cpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVJbmNvbWluZ1Jlc3BvbnNlKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29ubiAhPT0gYWN0aXZlQ29ubmVjdGlvbiB8fCBzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlY2VpdmluZyBhIG1lc3NhZ2UsIHdlIGNsb3NlIG9sZCBjb25uZWN0aW9uIHRoYXQgaGFzIG5vIHBlbmRpbmcgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICBjbG9zZUlmTm9QZW5kaW5nKGNvbm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29ubi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICh7IGNvZGUgIH0pPT57XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgIG9uQ2xvc2U/Lih7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3RpdmVDb25uZWN0aW9uID09PSBjb25uKSB7XG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBtaWdodCBoYXZlIGJlZW4gcmVwbGFjZWQgYWxyZWFkeVxuICAgICAgICAgICAgICAgIHRyeVJlY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCByZXFdIG9mIE9iamVjdC5lbnRyaWVzKHBlbmRpbmdSZXF1ZXN0cykpe1xuICAgICAgICAgICAgICAgIGlmIChyZXEud3MgIT09IGNvbm4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCwgd2UganVzdCBjYWxsIGBjb21wbGV0ZSgpYCBvbiB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGVuZGluZ1JlcXVlc3RzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJlcS5jYWxsYmFja3MuY29tcGxldGU/LigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBlaXRoZXIgdW5leHBlY3RlZGx5IG9yIGJlY2F1c2Ugb2YgYSByZWNvbm5lY3RcbiAgICAgICAgICAgICAgICBpZiAocmVxLnR5cGUgPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN1YnNjcmlwdGlvbnMgd2lsbCByZXN1bWUgYWZ0ZXIgd2UndmUgcmVjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgcmVzdW1lU3Vic2NyaXB0aW9uT25SZWNvbm5lY3QocmVxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBRdWVyaWVzIGFuZCBtdXRhdGlvbnMgd2lsbCBlcnJvciBpZiBpbnRlcnJ1cHRlZFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGVuZGluZ1JlcXVlc3RzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJlcS5jYWxsYmFja3MuZXJyb3I/LihUUlBDQ2xpZW50RXJyb3IuZnJvbShuZXcgVFJQQ1dlYlNvY2tldENsb3NlZEVycm9yKCdXZWJTb2NrZXQgY2xvc2VkIHByZW1hdHVyZWx5JykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29ubjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVxdWVzdChvcCwgY2FsbGJhY2tzKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSAsIGlucHV0ICwgcGF0aCAsIGlkICB9ID0gb3A7XG4gICAgICAgIGNvbnN0IGVudmVsb3BlID0ge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXRob2Q6IHR5cGUsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0c1tpZF0gPSB7XG4gICAgICAgICAgICB3czogYWN0aXZlQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBjYWxsYmFja3MsXG4gICAgICAgICAgICBvcFxuICAgICAgICB9O1xuICAgICAgICAvLyBlbnF1ZXVlIG1lc3NhZ2VcbiAgICAgICAgb3V0Z29pbmcucHVzaChlbnZlbG9wZSk7XG4gICAgICAgIGRpc3BhdGNoKCk7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gcGVuZGluZ1JlcXVlc3RzW2lkXT8uY2FsbGJhY2tzO1xuICAgICAgICAgICAgZGVsZXRlIHBlbmRpbmdSZXF1ZXN0c1tpZF07XG4gICAgICAgICAgICBvdXRnb2luZyA9IG91dGdvaW5nLmZpbHRlcigobXNnKT0+bXNnLmlkICE9PSBpZCk7XG4gICAgICAgICAgICBjYWxsYmFja3M/LmNvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVDb25uZWN0aW9uLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldEltcGwuT1BFTiAmJiBvcC50eXBlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICAgICAgICAgIG91dGdvaW5nLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnc3Vic2NyaXB0aW9uLnN0b3AnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xvc2U6ICgpPT57XG4gICAgICAgICAgICBzdGF0ZSA9ICdjbG9zZWQnO1xuICAgICAgICAgICAgb25DbG9zZT8uKCk7XG4gICAgICAgICAgICBjbG9zZUFjdGl2ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgICAgIGNsb3NlSWZOb1BlbmRpbmcoYWN0aXZlQ29ubmVjdGlvbik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY29ubmVjdFRpbWVyKTtcbiAgICAgICAgICAgIGNvbm5lY3RUaW1lciA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGdldENvbm5lY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUNvbm5lY3Rpb247XG4gICAgICAgIH1cbiAgICB9O1xufVxuY2xhc3MgVFJQQ1dlYlNvY2tldENsb3NlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2Upe1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RSUENXZWJTb2NrZXRDbG9zZWRFcnJvcic7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUUlBDV2ViU29ja2V0Q2xvc2VkRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvY2xpZW50L2xpbmtzL3dzTGlua1xuICovIGZ1bmN0aW9uIHdzTGluayhvcHRzKSB7XG4gICAgcmV0dXJuIChydW50aW1lKT0+e1xuICAgICAgICBjb25zdCB7IGNsaWVudCAgfSA9IG9wdHM7XG4gICAgICAgIHJldHVybiAoeyBvcCAgfSk9PntcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgICAgICAgICBjb25zdCB7IHR5cGUgLCBwYXRoICwgaWQgLCBjb250ZXh0ICB9ID0gb3A7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBydW50aW1lLnRyYW5zZm9ybWVyLnNlcmlhbGl6ZShvcC5pbnB1dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5zdWIgPSBjbGllbnQucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuc3ViKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5leHQgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtUmVzdWx0KG1lc3NhZ2UsIHJ1bnRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1lZC5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKHRyYW5zZm9ybWVkLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB0cmFuc2Zvcm1lZC5yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wLnR5cGUgIT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXQgaXNuJ3QgYSBzdWJzY3JpcHRpb24gd2UgZG9uJ3QgY2FyZSBhYm91dCBuZXh0IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHVuc3ViKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVdTQ2xpZW50LCB3c0xpbmsgfTtcbiJdLCJuYW1lcyI6WyJvYnNlcnZhYmxlIiwidCIsInRyYW5zZm9ybVJlc3VsdCIsIlQiLCJUUlBDQ2xpZW50RXJyb3IiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdEluZGV4IiwiTWF0aCIsIm1pbiIsImNyZWF0ZVdTQ2xpZW50Iiwib3B0cyIsInVybCIsIldlYlNvY2tldCIsIldlYlNvY2tldEltcGwiLCJyZXRyeURlbGF5TXMiLCJyZXRyeURlbGF5Rm4iLCJvbk9wZW4iLCJvbkNsb3NlIiwiRXJyb3IiLCJvdXRnb2luZyIsInBlbmRpbmdSZXF1ZXN0cyIsIk9iamVjdCIsImNyZWF0ZSIsImNvbm5lY3RBdHRlbXB0IiwiZGlzcGF0Y2hUaW1lciIsImNvbm5lY3RUaW1lciIsImFjdGl2ZUNvbm5lY3Rpb24iLCJjcmVhdGVXUyIsInN0YXRlIiwiZGlzcGF0Y2giLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwb3AiLCJ0cnlSZWNvbm5lY3QiLCJ0aW1lb3V0IiwicmVjb25uZWN0SW5NcyIsInJlY29ubmVjdCIsIm9sZENvbm5lY3Rpb24iLCJjbG9zZUlmTm9QZW5kaW5nIiwibXMiLCJjb25uIiwiaGFzUGVuZGluZ1JlcXVlc3RzIiwidmFsdWVzIiwic29tZSIsInAiLCJ3cyIsImNsb3NlIiwiY2xvc2VBY3RpdmVTdWJzY3JpcHRpb25zIiwiZm9yRWFjaCIsInJlcSIsInR5cGUiLCJjYWxsYmFja3MiLCJjb21wbGV0ZSIsInJlc3VtZVN1YnNjcmlwdGlvbk9uUmVjb25uZWN0IiwiciIsImlkIiwib3AiLCJyZXF1ZXN0IiwidXJsU3RyaW5nIiwiY2xlYXJUaW1lb3V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUluY29taW5nUmVxdWVzdCIsIm1ldGhvZCIsInBlbmRpbmdSZXEiLCJoYW5kbGVJbmNvbWluZ1Jlc3BvbnNlIiwiZGF0YSIsIm5leHQiLCJvbGRXcyIsInJlc3VsdCIsIm1zZyIsInBhcnNlIiwiY29kZSIsImtleSIsImVudHJpZXMiLCJlcnJvciIsImZyb20iLCJUUlBDV2ViU29ja2V0Q2xvc2VkRXJyb3IiLCJpbnB1dCIsInBhdGgiLCJlbnZlbG9wZSIsInBhcmFtcyIsInB1c2giLCJmaWx0ZXIiLCJyZWFkeVN0YXRlIiwiT1BFTiIsImdldENvbm5lY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJuYW1lIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJ3c0xpbmsiLCJydW50aW1lIiwiY2xpZW50Iiwib2JzZXJ2ZXIiLCJjb250ZXh0IiwidHJhbnNmb3JtZXIiLCJzZXJpYWxpemUiLCJ1bnN1YiIsImVyciIsInRyYW5zZm9ybWVkIiwib2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3NwbGl0TGluay00Yzc1ZjdiZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELGNBQWMsR0FBRyxTQUFTQyxZQUFZQyxJQUFJO0lBQ3RDLE9BQU9GLG1FQUFVQSxDQUFDLENBQUNHO1FBQ2YsU0FBU0MsUUFBUUMsUUFBUSxDQUFDLEVBQUVDLEtBQUtKLEtBQUtJLEVBQUU7WUFDcEMsTUFBTUMsT0FBT0wsS0FBS00sS0FBSyxDQUFDSCxNQUFNO1lBQzlCLElBQUksQ0FBQ0UsTUFBTTtnQkFDUCxNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxNQUFNQyxlQUFlSCxLQUFLO2dCQUN0QkQ7Z0JBQ0FDLE1BQU1JLE1BQU07b0JBQ1IsTUFBTUMsZUFBZVIsUUFBUUMsUUFBUSxHQUFHTTtvQkFDeEMsT0FBT0M7Z0JBQ1g7WUFDSjtZQUNBLE9BQU9GO1FBQ1g7UUFDQSxNQUFNRyxPQUFPVDtRQUNiLE9BQU9TLEtBQUtDLFNBQVMsQ0FBQ1g7SUFDMUI7QUFDSjtBQUVBLFNBQVNZLFFBQVFDLEtBQUs7SUFDbEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTQSxRQUFRO1FBQ2xDQTtLQUNIO0FBQ0w7QUFDQSxTQUFTRyxVQUFVakIsSUFBSTtJQUNuQixPQUFPLENBQUNrQjtRQUNKLE1BQU1DLE1BQU1OLFFBQVFiLEtBQUtvQixJQUFJLEVBQUVDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPQSxLQUFLSjtRQUNoRCxNQUFNSyxLQUFLVixRQUFRYixLQUFLd0IsS0FBSyxFQUFFSCxHQUFHLENBQUMsQ0FBQ0MsT0FBT0EsS0FBS0o7UUFDaEQsT0FBTyxDQUFDTztZQUNKLE9BQU8zQixtRUFBVUEsQ0FBQyxDQUFDRztnQkFDZixNQUFNSyxRQUFRTixLQUFLMEIsU0FBUyxDQUFDRCxNQUFNckIsRUFBRSxJQUFJZSxNQUFNSTtnQkFDL0MsT0FBT3hCLFlBQVk7b0JBQ2ZLLElBQUlxQixNQUFNckIsRUFBRTtvQkFDWkU7Z0JBQ0osR0FBR00sU0FBUyxDQUFDWDtZQUNqQjtRQUNKO0lBQ0o7QUFDSjtBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytjbGllbnRAMTAuNDUuMF9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcz8wOTkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gY3JlYXRlQ2hhaW4ob3B0cykge1xuICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZShpbmRleCA9IDAsIG9wID0gb3B0cy5vcCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG9wdHMubGlua3NbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb3JlIGxpbmtzIHRvIGV4ZWN1dGUgLSBkaWQgeW91IGZvcmdldCB0byBhZGQgYW4gZW5kaW5nIGxpbms/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBuZXh0KHtcbiAgICAgICAgICAgICAgICBvcCxcbiAgICAgICAgICAgICAgICBuZXh0IChuZXh0T3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE9ic2VydmVyID0gZXhlY3V0ZShpbmRleCArIDEsIG5leHRPcCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9icyQgPSBleGVjdXRlKCk7XG4gICAgICAgIHJldHVybiBvYnMkLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtcbiAgICAgICAgdmFsdWVcbiAgICBdO1xufVxuZnVuY3Rpb24gc3BsaXRMaW5rKG9wdHMpIHtcbiAgICByZXR1cm4gKHJ1bnRpbWUpPT57XG4gICAgICAgIGNvbnN0IHllcyA9IGFzQXJyYXkob3B0cy50cnVlKS5tYXAoKGxpbmspPT5saW5rKHJ1bnRpbWUpKTtcbiAgICAgICAgY29uc3Qgbm8gPSBhc0FycmF5KG9wdHMuZmFsc2UpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICByZXR1cm4gKHByb3BzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gb3B0cy5jb25kaXRpb24ocHJvcHMub3ApID8geWVzIDogbm87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluKHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IHByb3BzLm9wLFxuICAgICAgICAgICAgICAgICAgICBsaW5rc1xuICAgICAgICAgICAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVDaGFpbiBhcyBjLCBzcGxpdExpbmsgYXMgcyB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJjcmVhdGVDaGFpbiIsIm9wdHMiLCJvYnNlcnZlciIsImV4ZWN1dGUiLCJpbmRleCIsIm9wIiwibmV4dCIsImxpbmtzIiwiRXJyb3IiLCJzdWJzY3JpcHRpb24iLCJuZXh0T3AiLCJuZXh0T2JzZXJ2ZXIiLCJvYnMkIiwic3Vic2NyaWJlIiwiYXNBcnJheSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwic3BsaXRMaW5rIiwicnVudGltZSIsInllcyIsInRydWUiLCJtYXAiLCJsaW5rIiwibm8iLCJmYWxzZSIsInByb3BzIiwiY29uZGl0aW9uIiwiYyIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if (\"error\" in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== \"number\")) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxTQUFTQyxLQUFLO0lBQ25CLDZCQUE2QjtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVUsT0FBT0EsVUFBVTtBQUNoRTtBQUVBLFNBQVM7QUFDVCwrQ0FBK0M7QUFDL0MsbUVBQW1FO0FBQ25FLGNBQWMsR0FBRyxTQUFTRyxxQkFBcUJDLFFBQVEsRUFBRUMsT0FBTztJQUM1RCxJQUFJLFdBQVdELFVBQVU7UUFDckIsTUFBTUUsUUFBUUQsUUFBUUUsV0FBVyxDQUFDQyxXQUFXLENBQUNKLFNBQVNFLEtBQUs7UUFDNUQsT0FBTztZQUNIRyxJQUFJO1lBQ0pILE9BQU87Z0JBQ0gsR0FBR0YsUUFBUTtnQkFDWEU7WUFDSjtRQUNKO0lBQ0o7SUFDQSxNQUFNSSxTQUFTO1FBQ1gsR0FBR04sU0FBU00sTUFBTTtRQUNsQixHQUFHLENBQUMsQ0FBQ04sU0FBU00sTUFBTSxDQUFDQyxJQUFJLElBQUlQLFNBQVNNLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLE1BQUssS0FBTTtZQUM3REEsTUFBTTtZQUNOQyxNQUFNUCxRQUFRRSxXQUFXLENBQUNDLFdBQVcsQ0FBQ0osU0FBU00sTUFBTSxDQUFDRSxJQUFJO1FBQzlELENBQUM7SUFDTDtJQUNBLE9BQU87UUFDSEgsSUFBSTtRQUNKQztJQUNKO0FBQ0o7QUFDQSxNQUFNRyw2QkFBNkJDO0lBQy9CQyxhQUFhO1FBQ1QsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUFHLFNBQVNDLGdCQUFnQlosUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlLO0lBQ0osSUFBSTtRQUNBLGlEQUFpRDtRQUNqREEsU0FBU1AscUJBQXFCQyxVQUFVQztJQUM1QyxFQUFFLE9BQU9ZLEtBQUs7UUFDVixNQUFNLElBQUlKO0lBQ2Q7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDSCxPQUFPRCxFQUFFLElBQUssRUFBQ1YsU0FBU1csT0FBT0osS0FBSyxDQUFDQSxLQUFLLEtBQUssT0FBT0ksT0FBT0osS0FBSyxDQUFDQSxLQUFLLENBQUNZLElBQUksS0FBSyxRQUFPLEdBQUk7UUFDOUYsTUFBTSxJQUFJTDtJQUNkO0lBQ0EsSUFBSUgsT0FBT0QsRUFBRSxJQUFJLENBQUNWLFNBQVNXLE9BQU9BLE1BQU0sR0FBRztRQUN2QyxNQUFNLElBQUlHO0lBQ2Q7SUFDQSxPQUFPSDtBQUNYO0FBRStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzPzMxNWUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAvLyBjaGVjayB0aGF0IHZhbHVlIGlzIG9iamVjdFxuICAgIHJldHVybiAhIXZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG4vLyBGSVhNRTpcbi8vIC0gdGhlIGdlbmVyaWNzIGhlcmUgYXJlIHByb2JhYmx5IHVubmVjZXNzYXJ5XG4vLyAtIHRoZSBSUEMtc3BlYyBjb3VsZCBwcm9iYWJseSBiZSBzaW1wbGlmaWVkIHRvIGNvbWJpbmUgSFRUUCArIFdTXG4vKiogQGludGVybmFsICovIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAuLi5yZXNwb25zZS5yZXN1bHQsXG4gICAgICAgIC4uLighcmVzcG9uc2UucmVzdWx0LnR5cGUgfHwgcmVzcG9uc2UucmVzdWx0LnR5cGUgPT09ICdkYXRhJykgJiYge1xuICAgICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgICAgZGF0YTogcnVudGltZS50cmFuc2Zvcm1lci5kZXNlcmlhbGl6ZShyZXNwb25zZS5yZXN1bHQuZGF0YSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIHJlc3VsdFxuICAgIH07XG59XG5jbGFzcyBUcmFuc2Zvcm1SZXN1bHRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcignVW5hYmxlIHRvIHRyYW5zZm9ybSByZXNwb25zZSBmcm9tIHNlcnZlcicpO1xuICAgIH1cbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbmQgdmFsaWRhdGVzIHRoYXQgdGhlIHJlc3VsdCBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0KHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICAvLyBVc2UgdGhlIGRhdGEgdHJhbnNmb3JtZXJzIG9uIHRoZSBKU09OLXJlc3BvbnNlXG4gICAgICAgIHJlc3VsdCA9IHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIC8vIGNoZWNrIHRoYXQgb3V0cHV0IG9mIHRoZSB0cmFuc2Zvcm1lcnMgaXMgYSB2YWxpZCBUUlBDUmVzcG9uc2VcbiAgICBpZiAoIXJlc3VsdC5vayAmJiAoIWlzT2JqZWN0KHJlc3VsdC5lcnJvci5lcnJvcikgfHwgdHlwZW9mIHJlc3VsdC5lcnJvci5lcnJvci5jb2RlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQub2sgJiYgIWlzT2JqZWN0KHJlc3VsdC5yZXN1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUcmFuc2Zvcm1SZXN1bHRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBpc09iamVjdCBhcyBpLCB0cmFuc2Zvcm1SZXN1bHQgYXMgdCB9O1xuIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmFuc2Zvcm1SZXN1bHRJbm5lciIsInJlc3BvbnNlIiwicnVudGltZSIsImVycm9yIiwidHJhbnNmb3JtZXIiLCJkZXNlcmlhbGl6ZSIsIm9rIiwicmVzdWx0IiwidHlwZSIsImRhdGEiLCJUcmFuc2Zvcm1SZXN1bHRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1SZXN1bHQiLCJlcnIiLCJjb2RlIiwiaSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === \"TRPCClientError\";\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj.error) && typeof obj.error.code === \"number\" && typeof obj.error.message === \"string\";\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError(\"Unknown error\", {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.getCauseFromUnknown)(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0zOGY5YTMyYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBEO0FBQ0s7QUFFL0QsU0FBU0csa0JBQWtCQyxLQUFLO0lBQzVCLE9BQU9BLGlCQUFpQkMsbUJBQW1COzs7S0FHMUMsR0FBR0QsaUJBQWlCRSxTQUFTRixNQUFNRyxJQUFJLEtBQUs7QUFDakQ7QUFDQSxTQUFTQyxvQkFBb0JDLEdBQUc7SUFDNUIsT0FBT1AsZ0VBQVFBLENBQUNPLFFBQVFQLGdFQUFRQSxDQUFDTyxJQUFJQyxLQUFLLEtBQUssT0FBT0QsSUFBSUMsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWSxPQUFPRixJQUFJQyxLQUFLLENBQUNFLE9BQU8sS0FBSztBQUN0SDtBQUNBLE1BQU1QLHdCQUF3QkM7SUFDMUIsT0FBT08sS0FBS0MsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQzNCLE1BQU1YLFFBQVFVO1FBQ2QsSUFBSVgsa0JBQWtCQyxRQUFRO1lBQzFCLElBQUlXLEtBQUtDLElBQUksRUFBRTtnQkFDWCxnQ0FBZ0M7Z0JBQ2hDWixNQUFNWSxJQUFJLEdBQUc7b0JBQ1QsR0FBR1osTUFBTVksSUFBSTtvQkFDYixHQUFHRCxLQUFLQyxJQUFJO2dCQUNoQjtZQUNKO1lBQ0EsT0FBT1o7UUFDWDtRQUNBLElBQUlJLG9CQUFvQkosUUFBUTtZQUM1QixPQUFPLElBQUlDLGdCQUFnQkQsTUFBTU0sS0FBSyxDQUFDRSxPQUFPLEVBQUU7Z0JBQzVDLEdBQUdHLElBQUk7Z0JBQ1BFLFFBQVFiO1lBQ1o7UUFDSjtRQUNBLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCRSxLQUFJLEdBQUk7WUFDM0IsT0FBTyxJQUFJRCxnQkFBZ0IsaUJBQWlCO2dCQUN4QyxHQUFHVSxJQUFJO2dCQUNQWCxPQUFPQTtZQUNYO1FBQ0o7UUFDQSxPQUFPLElBQUlDLGdCQUFnQkQsTUFBTVEsT0FBTyxFQUFFO1lBQ3RDLEdBQUdHLElBQUk7WUFDUFgsT0FBT0osd0VBQW1CQSxDQUFDSTtRQUMvQjtJQUNKO0lBQ0FjLFlBQVlOLE9BQU8sRUFBRUcsSUFBSSxDQUFDO1FBQ3RCLE1BQU1YLFFBQVFXLE1BQU1YO1FBQ3BCLDZEQUE2RDtRQUM3RCwwREFBMEQ7UUFDMUQsS0FBSyxDQUFDUSxTQUFTO1lBQ1hSO1FBQ0o7UUFDQSxJQUFJLENBQUNZLElBQUksR0FBR0QsTUFBTUM7UUFDbEIsSUFBSSxDQUFDWixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDZSxLQUFLLEdBQUdKLE1BQU1FLFFBQVFQO1FBQzNCLElBQUksQ0FBQ1UsSUFBSSxHQUFHTCxNQUFNRSxRQUFRUCxNQUFNVTtRQUNoQyxJQUFJLENBQUNiLElBQUksR0FBRztRQUNaYyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFakIsZ0JBQWdCa0IsU0FBUztJQUN6RDtBQUNKO0FBRWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9UUlBDQ2xpZW50RXJyb3ItMzhmOWEzMmEubWpzP2Y5YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2F1c2VGcm9tVW5rbm93biB9IGZyb20gJ0B0cnBjL3NlcnZlci9zaGFyZWQnO1xuaW1wb3J0IHsgaSBhcyBpc09iamVjdCB9IGZyb20gJy4vdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyc7XG5cbmZ1bmN0aW9uIGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSB7XG4gICAgcmV0dXJuIGNhdXNlIGluc3RhbmNlb2YgVFJQQ0NsaWVudEVycm9yIHx8IC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogRGVsZXRlIGluIG5leHQgbWFqb3JcbiAgICAgKi8gY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5uYW1lID09PSAnVFJQQ0NsaWVudEVycm9yJztcbn1cbmZ1bmN0aW9uIGlzVFJQQ0Vycm9yUmVzcG9uc2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgaXNPYmplY3Qob2JqLmVycm9yKSAmJiB0eXBlb2Ygb2JqLmVycm9yLmNvZGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmouZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG59XG5jbGFzcyBUUlBDQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGljIGZyb20oX2NhdXNlLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBfY2F1c2U7XG4gICAgICAgIGlmIChpc1RSUENDbGllbnRFcnJvcihjYXVzZSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm1ldGEpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNvcmF0ZSB3aXRoIG1ldGEgZXJyb3IgZGF0YVxuICAgICAgICAgICAgICAgIGNhdXNlLm1ldGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNhdXNlLm1ldGEsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdHMubWV0YVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVFJQQ0Vycm9yUmVzcG9uc2UoY2F1c2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcihjYXVzZS5lcnJvci5tZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGNhdXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShjYXVzZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoJ1Vua25vd24gZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICBjYXVzZTogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBjYXVzZTogZ2V0Q2F1c2VGcm9tVW5rbm93bihjYXVzZSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdHMpe1xuICAgICAgICBjb25zdCBjYXVzZSA9IG9wdHM/LmNhdXNlO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbiAgICAgICAgc3VwZXIobWVzc2FnZSwge1xuICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWV0YSA9IG9wdHM/Lm1ldGE7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICAgICAgdGhpcy5zaGFwZSA9IG9wdHM/LnJlc3VsdD8uZXJyb3I7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdHM/LnJlc3VsdD8uZXJyb3IuZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RSUENDbGllbnRFcnJvcic7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUUlBDQ2xpZW50RXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRSUENDbGllbnRFcnJvciBhcyBUIH07XG4iXSwibmFtZXMiOlsiZ2V0Q2F1c2VGcm9tVW5rbm93biIsImkiLCJpc09iamVjdCIsImlzVFJQQ0NsaWVudEVycm9yIiwiY2F1c2UiLCJUUlBDQ2xpZW50RXJyb3IiLCJFcnJvciIsIm5hbWUiLCJpc1RSUENFcnJvclJlc3BvbnNlIiwib2JqIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImZyb20iLCJfY2F1c2UiLCJvcHRzIiwibWV0YSIsInJlc3VsdCIsImNvbnN0cnVjdG9yIiwic2hhcGUiLCJkYXRhIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader(\"query\"));\n            const mutation = dataLoader(batchLoader(\"mutation\"));\n            const subscription = dataLoader(batchLoader(\"subscription\"));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error(\"No fetch implementation found\");\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, \"\"),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + \"/\" + opts.path;\n    const queryParts = [];\n    if (\"inputs\" in opts) {\n        queryParts.push(\"batch=1\");\n    }\n    if (opts.type === \"query\") {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += \"?\" + queryParts.join(\"&\");\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\") {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n        throw new Error(\"Subscriptions should use wsLink\");\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            \"content-type\": opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            \"trpc-batch-mode\": opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-d0f9eac9.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener(\"abort\", abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === \"started\") {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === \"stopped\") {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if (\"input\" in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === \"__untypedClient\") {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join(\".\");\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error(\"No TextDecoder implementation found\");\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === \"}\") {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(\":\");\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = \"\";\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split(\"\\n\");\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if (\"getReader\" in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on(\"data\", onChunk);\n        stream.on(\"end\", resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error(\"Received response without body\");\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!(\"input\" in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error(\"Input is not FormData\");\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== \"mutation\") {\n        // TODO(?) handle formdata queries\n        throw new Error(\"We only handle mutations with formdata\");\n    }\n    return (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-b9d0cb48.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/shared */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === \"function\") {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFEO0FBQ2tCO0FBQ0E7QUFDeUI7QUFDbkU7QUFFN0IsU0FBU1MsZ0JBQWdCQyxXQUFXO0lBQ2hDLE9BQU8sQ0FBQ0M7UUFDSixNQUFNQyxlQUFlTiwwREFBc0JBLENBQUNLO1FBQzVDLE9BQU8sQ0FBQ0UsVUFBVSxDQUFDLEVBQUVDLEVBQUUsRUFBRyxHQUFHZCxtRUFBVUEsQ0FBQyxDQUFDZTtvQkFDN0IsTUFBTSxFQUFFQyxJQUFJLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUdKO29CQUNqQyxNQUFNLEVBQUVLLE9BQU8sRUFBR0MsTUFBTSxFQUFHLEdBQUdWLFlBQVlXLFNBQVMsQ0FBQzt3QkFDaEQsR0FBR1QsWUFBWTt3QkFDZkM7d0JBQ0FLO3dCQUNBRjt3QkFDQUM7d0JBQ0FLOzRCQUNJLElBQUksQ0FBQ1gsS0FBS1csT0FBTyxFQUFFO2dDQUNmLE9BQU8sQ0FBQzs0QkFDWjs0QkFDQSxJQUFJLE9BQU9YLEtBQUtXLE9BQU8sS0FBSyxZQUFZO2dDQUNwQyxPQUFPWCxLQUFLVyxPQUFPLENBQUM7b0NBQ2hCUjtnQ0FDSjs0QkFDSjs0QkFDQSxPQUFPSCxLQUFLVyxPQUFPO3dCQUN2QjtvQkFDSjtvQkFDQSxJQUFJQyxPQUFPQztvQkFDWEwsUUFBUU0sSUFBSSxDQUFDLENBQUNDO3dCQUNWSCxPQUFPRyxJQUFJSCxJQUFJO3dCQUNmLE1BQU1JLGNBQWN6QixnRUFBZUEsQ0FBQ3dCLElBQUlFLElBQUksRUFBRWY7d0JBQzlDLElBQUksQ0FBQ2MsWUFBWUUsRUFBRSxFQUFFOzRCQUNqQmQsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNKLFlBQVlHLEtBQUssRUFBRTtnQ0FDbkRQOzRCQUNKOzRCQUNBO3dCQUNKO3dCQUNBUixTQUFTaUIsSUFBSSxDQUFDOzRCQUNWQyxTQUFTUCxJQUFJSCxJQUFJOzRCQUNqQlcsUUFBUVAsWUFBWU8sTUFBTTt3QkFDOUI7d0JBQ0FuQixTQUFTb0IsUUFBUTtvQkFDckIsR0FBR0MsS0FBSyxDQUFDLENBQUNDO3dCQUNOdEIsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNNLE9BQU87NEJBQ3ZDZDt3QkFDSjtvQkFDSjtvQkFDQSxPQUFPO3dCQUNISDtvQkFDSjtnQkFDSjtJQUNaO0FBQ0o7QUFDQTs7Q0FFQyxHQUFHLE1BQU1rQixXQUFXN0IsZ0JBQWdCO0lBQ2pDWSxXQUFXYixzREFBaUJBO0FBQ2hDO0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9saW5rcy9odHRwTGluay5tanM/NzJhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHsgdCBhcyB0cmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi4vVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyc7XG5pbXBvcnQgeyByIGFzIHJlc29sdmVIVFRQTGlua09wdGlvbnMsIGogYXMganNvbkh0dHBSZXF1ZXN0ZXIgfSBmcm9tICcuLi9odHRwVXRpbHMtYjlkMGNiNDgubWpzJztcbmltcG9ydCAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5cbmZ1bmN0aW9uIGh0dHBMaW5rRmFjdG9yeShmYWN0b3J5T3B0cykge1xuICAgIHJldHVybiAob3B0cyk9PntcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRPcHRzID0gcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgcmV0dXJuIChydW50aW1lKT0+KHsgb3AgIH0pPT5vYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoICwgaW5wdXQgLCB0eXBlICB9ID0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGZhY3RvcnlPcHRzLnJlcXVlc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZE9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEgPSByZXMubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtUmVzdWx0KHJlcy5qc29uLCBydW50aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtZWQub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbSh0cmFuc2Zvcm1lZC5lcnJvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogdHJhbnNmb3JtZWQucmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChjYXVzZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGNhdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwTGlua1xuICovIGNvbnN0IGh0dHBMaW5rID0gaHR0cExpbmtGYWN0b3J5KHtcbiAgICByZXF1ZXN0ZXI6IGpzb25IdHRwUmVxdWVzdGVyXG59KTtcblxuZXhwb3J0IHsgaHR0cExpbmssIGh0dHBMaW5rRmFjdG9yeSB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJ0IiwidHJhbnNmb3JtUmVzdWx0IiwiVCIsIlRSUENDbGllbnRFcnJvciIsInIiLCJyZXNvbHZlSFRUUExpbmtPcHRpb25zIiwiaiIsImpzb25IdHRwUmVxdWVzdGVyIiwiaHR0cExpbmtGYWN0b3J5IiwiZmFjdG9yeU9wdHMiLCJvcHRzIiwicmVzb2x2ZWRPcHRzIiwicnVudGltZSIsIm9wIiwib2JzZXJ2ZXIiLCJwYXRoIiwiaW5wdXQiLCJ0eXBlIiwicHJvbWlzZSIsImNhbmNlbCIsInJlcXVlc3RlciIsImhlYWRlcnMiLCJtZXRhIiwidW5kZWZpbmVkIiwidGhlbiIsInJlcyIsInRyYW5zZm9ybWVkIiwianNvbiIsIm9rIiwiZXJyb3IiLCJmcm9tIiwibmV4dCIsImNvbnRleHQiLCJyZXN1bHQiLCJjb21wbGV0ZSIsImNhdGNoIiwiY2F1c2UiLCJodHRwTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1b[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === \"up\") {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: \"result\" in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === \"up\" ? light : dark}; \n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === \"up\") {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = \"css\" })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? \"ansi\" : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: \"up\"\n                }) && logger({\n                    ...op,\n                    direction: \"up\"\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: \"down\",\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = \"connecting\";\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== \"open\" || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === \"closed\") {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = \"connecting\";\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = \"connecting\";\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === \"subscription\") {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === \"function\" ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener(\"open\", ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = \"open\";\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener(\"error\", ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === \"reconnect\" && conn === activeConnection) {\n                if (state === \"open\") {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === \"subscription\") {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if (\"result\" in data && data.result.type === \"stopped\" && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener(\"message\", ({ data })=>{\n            const msg = JSON.parse(data);\n            if (\"method\" in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === \"closed\") {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener(\"close\", ({ code })=>{\n            if (state === \"open\") {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === \"closed\") {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === \"subscription\") {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError(\"WebSocket closed prematurely\")));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === \"subscription\") {\n                outgoing.push({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = \"closed\";\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== \"subscription\") {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(rsc)/./node_modules/.pnpm/@trpc+server@10.45.0/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3NwbGl0TGluay00Yzc1ZjdiZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELGNBQWMsR0FBRyxTQUFTQyxZQUFZQyxJQUFJO0lBQ3RDLE9BQU9GLG1FQUFVQSxDQUFDLENBQUNHO1FBQ2YsU0FBU0MsUUFBUUMsUUFBUSxDQUFDLEVBQUVDLEtBQUtKLEtBQUtJLEVBQUU7WUFDcEMsTUFBTUMsT0FBT0wsS0FBS00sS0FBSyxDQUFDSCxNQUFNO1lBQzlCLElBQUksQ0FBQ0UsTUFBTTtnQkFDUCxNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxNQUFNQyxlQUFlSCxLQUFLO2dCQUN0QkQ7Z0JBQ0FDLE1BQU1JLE1BQU07b0JBQ1IsTUFBTUMsZUFBZVIsUUFBUUMsUUFBUSxHQUFHTTtvQkFDeEMsT0FBT0M7Z0JBQ1g7WUFDSjtZQUNBLE9BQU9GO1FBQ1g7UUFDQSxNQUFNRyxPQUFPVDtRQUNiLE9BQU9TLEtBQUtDLFNBQVMsQ0FBQ1g7SUFDMUI7QUFDSjtBQUVBLFNBQVNZLFFBQVFDLEtBQUs7SUFDbEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTQSxRQUFRO1FBQ2xDQTtLQUNIO0FBQ0w7QUFDQSxTQUFTRyxVQUFVakIsSUFBSTtJQUNuQixPQUFPLENBQUNrQjtRQUNKLE1BQU1DLE1BQU1OLFFBQVFiLEtBQUtvQixJQUFJLEVBQUVDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPQSxLQUFLSjtRQUNoRCxNQUFNSyxLQUFLVixRQUFRYixLQUFLd0IsS0FBSyxFQUFFSCxHQUFHLENBQUMsQ0FBQ0MsT0FBT0EsS0FBS0o7UUFDaEQsT0FBTyxDQUFDTztZQUNKLE9BQU8zQixtRUFBVUEsQ0FBQyxDQUFDRztnQkFDZixNQUFNSyxRQUFRTixLQUFLMEIsU0FBUyxDQUFDRCxNQUFNckIsRUFBRSxJQUFJZSxNQUFNSTtnQkFDL0MsT0FBT3hCLFlBQVk7b0JBQ2ZLLElBQUlxQixNQUFNckIsRUFBRTtvQkFDWkU7Z0JBQ0osR0FBR00sU0FBUyxDQUFDWDtZQUNqQjtRQUNKO0lBQ0o7QUFDSjtBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nvb3Blci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytjbGllbnRAMTAuNDUuMF9AdHJwYytzZXJ2ZXJAMTAuNDUuMC9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcz8wOTkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gY3JlYXRlQ2hhaW4ob3B0cykge1xuICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZShpbmRleCA9IDAsIG9wID0gb3B0cy5vcCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG9wdHMubGlua3NbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb3JlIGxpbmtzIHRvIGV4ZWN1dGUgLSBkaWQgeW91IGZvcmdldCB0byBhZGQgYW4gZW5kaW5nIGxpbms/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBuZXh0KHtcbiAgICAgICAgICAgICAgICBvcCxcbiAgICAgICAgICAgICAgICBuZXh0IChuZXh0T3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE9ic2VydmVyID0gZXhlY3V0ZShpbmRleCArIDEsIG5leHRPcCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9icyQgPSBleGVjdXRlKCk7XG4gICAgICAgIHJldHVybiBvYnMkLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtcbiAgICAgICAgdmFsdWVcbiAgICBdO1xufVxuZnVuY3Rpb24gc3BsaXRMaW5rKG9wdHMpIHtcbiAgICByZXR1cm4gKHJ1bnRpbWUpPT57XG4gICAgICAgIGNvbnN0IHllcyA9IGFzQXJyYXkob3B0cy50cnVlKS5tYXAoKGxpbmspPT5saW5rKHJ1bnRpbWUpKTtcbiAgICAgICAgY29uc3Qgbm8gPSBhc0FycmF5KG9wdHMuZmFsc2UpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICByZXR1cm4gKHByb3BzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gb3B0cy5jb25kaXRpb24ocHJvcHMub3ApID8geWVzIDogbm87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluKHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IHByb3BzLm9wLFxuICAgICAgICAgICAgICAgICAgICBsaW5rc1xuICAgICAgICAgICAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVDaGFpbiBhcyBjLCBzcGxpdExpbmsgYXMgcyB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJjcmVhdGVDaGFpbiIsIm9wdHMiLCJvYnNlcnZlciIsImV4ZWN1dGUiLCJpbmRleCIsIm9wIiwibmV4dCIsImxpbmtzIiwiRXJyb3IiLCJzdWJzY3JpcHRpb24iLCJuZXh0T3AiLCJuZXh0T2JzZXJ2ZXIiLCJvYnMkIiwic3Vic2NyaWJlIiwiYXNBcnJheSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwic3BsaXRMaW5rIiwicnVudGltZSIsInllcyIsInRydWUiLCJtYXAiLCJsaW5rIiwibm8iLCJmYWxzZSIsInByb3BzIiwiY29uZGl0aW9uIiwiYyIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if (\"error\" in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== \"number\")) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjBfQHRycGMrc2VydmVyQDEwLjQ1LjAvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxTQUFTQyxLQUFLO0lBQ25CLDZCQUE2QjtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVUsT0FBT0EsVUFBVTtBQUNoRTtBQUVBLFNBQVM7QUFDVCwrQ0FBK0M7QUFDL0MsbUVBQW1FO0FBQ25FLGNBQWMsR0FBRyxTQUFTRyxxQkFBcUJDLFFBQVEsRUFBRUMsT0FBTztJQUM1RCxJQUFJLFdBQVdELFVBQVU7UUFDckIsTUFBTUUsUUFBUUQsUUFBUUUsV0FBVyxDQUFDQyxXQUFXLENBQUNKLFNBQVNFLEtBQUs7UUFDNUQsT0FBTztZQUNIRyxJQUFJO1lBQ0pILE9BQU87Z0JBQ0gsR0FBR0YsUUFBUTtnQkFDWEU7WUFDSjtRQUNKO0lBQ0o7SUFDQSxNQUFNSSxTQUFTO1FBQ1gsR0FBR04sU0FBU00sTUFBTTtRQUNsQixHQUFHLENBQUMsQ0FBQ04sU0FBU00sTUFBTSxDQUFDQyxJQUFJLElBQUlQLFNBQVNNLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLE1BQUssS0FBTTtZQUM3REEsTUFBTTtZQUNOQyxNQUFNUCxRQUFRRSxXQUFXLENBQUNDLFdBQVcsQ0FBQ0osU0FBU00sTUFBTSxDQUFDRSxJQUFJO1FBQzlELENBQUM7SUFDTDtJQUNBLE9BQU87UUFDSEgsSUFBSTtRQUNKQztJQUNKO0FBQ0o7QUFDQSxNQUFNRyw2QkFBNkJDO0lBQy9CQyxhQUFhO1FBQ1QsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUFHLFNBQVNDLGdCQUFnQlosUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlLO0lBQ0osSUFBSTtRQUNBLGlEQUFpRDtRQUNqREEsU0FBU1AscUJBQXFCQyxVQUFVQztJQUM1QyxFQUFFLE9BQU9ZLEtBQUs7UUFDVixNQUFNLElBQUlKO0lBQ2Q7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDSCxPQUFPRCxFQUFFLElBQUssRUFBQ1YsU0FBU1csT0FBT0osS0FBSyxDQUFDQSxLQUFLLEtBQUssT0FBT0ksT0FBT0osS0FBSyxDQUFDQSxLQUFLLENBQUNZLElBQUksS0FBSyxRQUFPLEdBQUk7UUFDOUYsTUFBTSxJQUFJTDtJQUNkO0lBQ0EsSUFBSUgsT0FBT0QsRUFBRSxJQUFJLENBQUNWLFNBQVNXLE9BQU9BLE1BQU0sR0FBRztRQUN2QyxNQUFNLElBQUlHO0lBQ2Q7SUFDQSxPQUFPSDtBQUNYO0FBRStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29vcGVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4wX0B0cnBjK3NlcnZlckAxMC40NS4wL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzPzMxNWUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAvLyBjaGVjayB0aGF0IHZhbHVlIGlzIG9iamVjdFxuICAgIHJldHVybiAhIXZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG4vLyBGSVhNRTpcbi8vIC0gdGhlIGdlbmVyaWNzIGhlcmUgYXJlIHByb2JhYmx5IHVubmVjZXNzYXJ5XG4vLyAtIHRoZSBSUEMtc3BlYyBjb3VsZCBwcm9iYWJseSBiZSBzaW1wbGlmaWVkIHRvIGNvbWJpbmUgSFRUUCArIFdTXG4vKiogQGludGVybmFsICovIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAuLi5yZXNwb25zZS5yZXN1bHQsXG4gICAgICAgIC4uLighcmVzcG9uc2UucmVzdWx0LnR5cGUgfHwgcmVzcG9uc2UucmVzdWx0LnR5cGUgPT09ICdkYXRhJykgJiYge1xuICAgICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgICAgZGF0YTogcnVudGltZS50cmFuc2Zvcm1lci5kZXNlcmlhbGl6ZShyZXNwb25zZS5yZXN1bHQuZGF0YSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIHJlc3VsdFxuICAgIH07XG59XG5jbGFzcyBUcmFuc2Zvcm1SZXN1bHRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcignVW5hYmxlIHRvIHRyYW5zZm9ybSByZXNwb25zZSBmcm9tIHNlcnZlcicpO1xuICAgIH1cbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbmQgdmFsaWRhdGVzIHRoYXQgdGhlIHJlc3VsdCBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0KHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICAvLyBVc2UgdGhlIGRhdGEgdHJhbnNmb3JtZXJzIG9uIHRoZSBKU09OLXJlc3BvbnNlXG4gICAgICAgIHJlc3VsdCA9IHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIC8vIGNoZWNrIHRoYXQgb3V0cHV0IG9mIHRoZSB0cmFuc2Zvcm1lcnMgaXMgYSB2YWxpZCBUUlBDUmVzcG9uc2VcbiAgICBpZiAoIXJlc3VsdC5vayAmJiAoIWlzT2JqZWN0KHJlc3VsdC5lcnJvci5lcnJvcikgfHwgdHlwZW9mIHJlc3VsdC5lcnJvci5lcnJvci5jb2RlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQub2sgJiYgIWlzT2JqZWN0KHJlc3VsdC5yZXN1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUcmFuc2Zvcm1SZXN1bHRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBpc09iamVjdCBhcyBpLCB0cmFuc2Zvcm1SZXN1bHQgYXMgdCB9O1xuIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmFuc2Zvcm1SZXN1bHRJbm5lciIsInJlc3BvbnNlIiwicnVudGltZSIsImVycm9yIiwidHJhbnNmb3JtZXIiLCJkZXNlcmlhbGl6ZSIsIm9rIiwicmVzdWx0IiwidHlwZSIsImRhdGEiLCJUcmFuc2Zvcm1SZXN1bHRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1SZXN1bHQiLCJlcnIiLCJjb2RlIiwiaSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+client@10.45.0_@trpc+server@10.45.0/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ })

};
;